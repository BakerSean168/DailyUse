"use strict";const n=require("electron"),t=require("node:path");n.contextBridge.exposeInMainWorld("shared",{ipcRenderer:{on(...e){const[r,i]=e;return n.ipcRenderer.on(r,(o,...c)=>i(o,...c))},off(...e){const[r,...i]=e;return n.ipcRenderer.off(r,...i)},send(...e){const[r,...i]=e;return n.ipcRenderer.send(r,...i)},invoke(...e){const[r,...i]=e;return n.ipcRenderer.invoke(r,...i)}},path:{join(...e){return t.join(...e)},basename(...e){return t.basename(...e)},dirname(...e){return t.dirname(...e)},extname(...e){return t.extname(...e)},resolve(...e){return t.resolve(...e)}}});n.contextBridge.exposeInMainWorld("git",{initialize:e=>n.ipcRenderer.invoke("git:initialize",e),init:e=>n.ipcRenderer.invoke("git:init",e),getStatus:()=>n.ipcRenderer.invoke("git:status"),add:e=>n.ipcRenderer.invoke("git:add",e),stage:e=>n.ipcRenderer.invoke("git:stage",e),unstage:e=>n.ipcRenderer.invoke("git:unstage",e),checkIsRepo:e=>n.ipcRenderer.invoke("git:checkIsRepo",e),commit:e=>n.ipcRenderer.invoke("git:commit",e),onStatusChanged:e=>{n.ipcRenderer.on("git:status-changed",(r,i)=>e(i))},stageAll:()=>n.ipcRenderer.invoke("git:stageAll"),unstageAll:()=>n.ipcRenderer.invoke("git:unstageAll"),discardAll:()=>n.ipcRenderer.invoke("git:discardAll"),getLog:()=>n.ipcRenderer.invoke("git:getLog")});
