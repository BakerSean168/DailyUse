/**
 * Editor Store
 * 编辑器 Pinia 状态管理
 */

import { defineStore } from 'pinia';
import { ref, computed, watch } from 'vue';

// 临时类型定义
interface Document {
  uuid: string;
  repositoryUuid: string;
  title: string;
  content: string;
  format: string;
  isDirty: boolean;
  lastSavedAt?: Date;
}

interface EditorWorkspace {
  uuid: string;
  name: string;
  repositoryUuid: string;
  currentDocumentUuid?: string;
  openDocuments: OpenDocument[];
  settings: EditorSettings;
  layout: WorkspaceLayout;
}

interface OpenDocument {
  documentUuid: string;
  tabTitle: string;
  isDirty: boolean;
  lastActiveAt: number;
  cursorPosition: Position;
  scrollPosition: ScrollPosition;
}

interface Position {
  line: number;
  column: number;
  offset: number;
}

interface ScrollPosition {
  x: number;
  y: number;
}

interface EditorSettings {
  theme: any;
  fontSize: number;
  fontFamily: string;
  lineHeight: number;
  tabSize: number;
  wordWrap: boolean;
  lineNumbers: boolean;
  minimap: boolean;
  autoSave: any;
  syntax: any;
}

interface WorkspaceLayout {
  sidebarWidth: number;
  editorWidth: number;
  previewWidth: number;
  isPreviewVisible: boolean;
  panelSizes: any;
  viewMode: string;
}

interface SearchState {
  currentQuery: string;
  searchType: string;
  isSearching: boolean;
  results: any[];
  selectedResultIndex: number;
}

interface SidebarState {
  isVisible: boolean;
  width: number;
  activeTab: string;
  tabs: any[];
}

/**
 * 编辑器文档状态管理
 */
export const useEditorDocumentStore = defineStore(
  'editorDocument',
  () => {
    // 状态
    const documents = ref<Map<string, Document>>(new Map());
    const activeDocumentUuid = ref<string | null>(null);
    const dirtyDocuments = ref<Set<string>>(new Set());

    // 计算属性
    const activeDocument = computed(() => {
      if (!activeDocumentUuid.value) return null;
      return documents.value.get(activeDocumentUuid.value) || null;
    });

    const documentList = computed(() => {
      return Array.from(documents.value.values());
    });

    const hasDirtyDocuments = computed(() => {
      return dirtyDocuments.value.size > 0;
    });

    const dirtyDocumentsList = computed(() => {
      return Array.from(dirtyDocuments.value)
        .map((uuid) => documents.value.get(uuid))
        .filter(Boolean) as Document[];
    });

    // 动作
    const addDocument = (document: Document) => {
      documents.value.set(document.uuid, document);

      // 如果没有活动文档，设置为当前文档
      if (!activeDocumentUuid.value) {
        activeDocumentUuid.value = document.uuid;
      }
    };

    const removeDocument = (documentUuid: string) => {
      documents.value.delete(documentUuid);
      dirtyDocuments.value.delete(documentUuid);

      // 如果删除的是活动文档，切换到其他文档
      if (activeDocumentUuid.value === documentUuid) {
        const remainingDocs = Array.from(documents.value.keys());
        activeDocumentUuid.value = remainingDocs.length > 0 ? remainingDocs[0] : null;
      }
    };

    const setActiveDocument = (documentUuid: string) => {
      if (documents.value.has(documentUuid)) {
        activeDocumentUuid.value = documentUuid;
      }
    };

    const updateDocumentContent = (documentUuid: string, content: string) => {
      const document = documents.value.get(documentUuid);
      if (document) {
        const updatedDocument = {
          ...document,
          content,
          isDirty: true,
        };
        documents.value.set(documentUuid, updatedDocument);
        dirtyDocuments.value.add(documentUuid);
      }
    };

    const markDocumentSaved = (documentUuid: string) => {
      const document = documents.value.get(documentUuid);
      if (document) {
        const updatedDocument = {
          ...document,
          isDirty: false,
          lastSavedAt: new Date(),
        };
        documents.value.set(documentUuid, updatedDocument);
        dirtyDocuments.value.delete(documentUuid);
      }
    };

    const saveDocument = async (documentUuid: string) => {
      const document = documents.value.get(documentUuid);
      if (!document) return;

      try {
        // TODO: 调用实际的保存 API
        console.log('Saving document:', document.title);

        // 模拟保存延迟
        await new Promise((resolve) => setTimeout(resolve, 100));

        markDocumentSaved(documentUuid);
      } catch (error) {
        console.error('Failed to save document:', error);
        throw error;
      }
    };

    const saveAllDocuments = async () => {
      const savePromises = Array.from(dirtyDocuments.value).map((uuid) => saveDocument(uuid));
      await Promise.all(savePromises);
    };

    const clearDocuments = () => {
      documents.value.clear();
      dirtyDocuments.value.clear();
      activeDocumentUuid.value = null;
    };

    return {
      // 状态
      documents: computed(() => documents.value),
      activeDocumentUuid: computed(() => activeDocumentUuid.value),
      dirtyDocuments: computed(() => dirtyDocuments.value),

      // 计算属性
      activeDocument,
      documentList,
      hasDirtyDocuments,
      dirtyDocumentsList,

      // 动作
      addDocument,
      removeDocument,
      setActiveDocument,
      updateDocumentContent,
      markDocumentSaved,
      saveDocument,
      saveAllDocuments,
      clearDocuments,
    };
  },
  {
    persist: {
      key: 'editor-documents',
      storage: localStorage,
      paths: ['documents', 'activeDocumentUuid', 'dirtyDocuments'],
    },
  },
);

/**
 * 编辑器工作空间状态管理
 */
export const useEditorWorkspaceStore = defineStore(
  'editorWorkspace',
  () => {
    // 状态
    const workspaces = ref<Map<string, EditorWorkspace>>(new Map());
    const activeWorkspaceUuid = ref<string | null>(null);
    const settings = ref<EditorSettings>({
      theme: { name: 'Light', isDark: false, colors: {} },
      fontSize: 14,
      fontFamily: 'Monaco, "Courier New", monospace',
      lineHeight: 1.5,
      tabSize: 4,
      wordWrap: true,
      lineNumbers: true,
      minimap: true,
      autoSave: { enabled: true, interval: 5000, onFocusLoss: true },
      syntax: {
        highlightEnabled: true,
        language: 'markdown',
        markdownPreview: true,
        livePreview: true,
      },
    });
    const layout = ref<WorkspaceLayout>({
      sidebarWidth: 250,
      editorWidth: 800,
      previewWidth: 400,
      isPreviewVisible: false,
      panelSizes: { sidebar: 250, editor: 800, preview: 400 },
      viewMode: 'editor',
    });

    // 计算属性
    const activeWorkspace = computed(() => {
      if (!activeWorkspaceUuid.value) return null;
      return workspaces.value.get(activeWorkspaceUuid.value) || null;
    });

    const workspaceList = computed(() => {
      return Array.from(workspaces.value.values());
    });

    // 动作
    const addWorkspace = (workspace: EditorWorkspace) => {
      workspaces.value.set(workspace.uuid, workspace);

      if (!activeWorkspaceUuid.value) {
        activeWorkspaceUuid.value = workspace.uuid;
      }
    };

    const removeWorkspace = (workspaceUuid: string) => {
      workspaces.value.delete(workspaceUuid);

      if (activeWorkspaceUuid.value === workspaceUuid) {
        const remainingWorkspaces = Array.from(workspaces.value.keys());
        activeWorkspaceUuid.value = remainingWorkspaces.length > 0 ? remainingWorkspaces[0] : null;
      }
    };

    const setActiveWorkspace = (workspaceUuid: string) => {
      if (workspaces.value.has(workspaceUuid)) {
        activeWorkspaceUuid.value = workspaceUuid;
      }
    };

    const updateSettings = (newSettings: Partial<EditorSettings>) => {
      settings.value = { ...settings.value, ...newSettings };
    };

    const updateLayout = (newLayout: Partial<WorkspaceLayout>) => {
      layout.value = { ...layout.value, ...newLayout };
    };

    const togglePreview = () => {
      layout.value.isPreviewVisible = !layout.value.isPreviewVisible;
    };

    const setSidebarWidth = (width: number) => {
      layout.value.sidebarWidth = Math.max(200, Math.min(500, width));
      layout.value.panelSizes.sidebar = layout.value.sidebarWidth;
    };

    return {
      // 状态
      workspaces: computed(() => workspaces.value),
      activeWorkspaceUuid: computed(() => activeWorkspaceUuid.value),
      settings: computed(() => settings.value),
      layout: computed(() => layout.value),

      // 计算属性
      activeWorkspace,
      workspaceList,

      // 动作
      addWorkspace,
      removeWorkspace,
      setActiveWorkspace,
      updateSettings,
      updateLayout,
      togglePreview,
      setSidebarWidth,
    };
  },
  {
    persist: {
      key: 'editor-workspace',
      storage: localStorage,
      paths: ['workspaces', 'activeWorkspaceUuid', 'settings', 'layout'],
    },
  },
);

/**
 * 编辑器 UI 状态管理
 */
export const useEditorUIStore = defineStore(
  'editorUI',
  () => {
    // 状态
    const sidebarState = ref<SidebarState>({
      isVisible: true,
      width: 250,
      activeTab: 'files',
      tabs: [
        { id: 'files', title: 'Files', icon: 'folder', isEnabled: true, order: 1 },
        { id: 'search', title: 'Search', icon: 'search', isEnabled: true, order: 2 },
        { id: 'tags', title: 'Tags', icon: 'tag', isEnabled: true, order: 3 },
        { id: 'outline', title: 'Outline', icon: 'list', isEnabled: true, order: 4 },
      ],
    });

    const searchState = ref<SearchState>({
      currentQuery: '',
      searchType: 'fulltext',
      isSearching: false,
      results: [],
      selectedResultIndex: -1,
    });

    const isFullscreen = ref(false);
    const isZenMode = ref(false);
    const isFocusMode = ref(false);

    // 计算属性
    const activeSidebarTab = computed(() => {
      return sidebarState.value.tabs.find((tab) => tab.id === sidebarState.value.activeTab);
    });

    const enabledSidebarTabs = computed(() => {
      return sidebarState.value.tabs
        .filter((tab) => tab.isEnabled)
        .sort((a, b) => a.order - b.order);
    });

    // 动作
    const toggleSidebar = () => {
      sidebarState.value.isVisible = !sidebarState.value.isVisible;
    };

    const setSidebarTab = (tabId: string) => {
      const tab = sidebarState.value.tabs.find((t) => t.id === tabId);
      if (tab && tab.isEnabled) {
        sidebarState.value.activeTab = tabId;
      }
    };

    const setSidebarWidth = (width: number) => {
      sidebarState.value.width = Math.max(200, Math.min(500, width));
    };

    const startSearch = (query: string, searchType: string = 'fulltext') => {
      searchState.value.currentQuery = query;
      searchState.value.searchType = searchType;
      searchState.value.isSearching = true;
      searchState.value.selectedResultIndex = -1;
    };

    const finishSearch = (results: any[]) => {
      searchState.value.results = results;
      searchState.value.isSearching = false;
      searchState.value.selectedResultIndex = results.length > 0 ? 0 : -1;
    };

    const clearSearch = () => {
      searchState.value.currentQuery = '';
      searchState.value.results = [];
      searchState.value.selectedResultIndex = -1;
    };

    const selectSearchResult = (index: number) => {
      if (index >= 0 && index < searchState.value.results.length) {
        searchState.value.selectedResultIndex = index;
      }
    };

    const toggleFullscreen = () => {
      isFullscreen.value = !isFullscreen.value;
    };

    const toggleZenMode = () => {
      isZenMode.value = !isZenMode.value;
      if (isZenMode.value) {
        sidebarState.value.isVisible = false;
      }
    };

    const toggleFocusMode = () => {
      isFocusMode.value = !isFocusMode.value;
    };

    const exitSpecialModes = () => {
      isFullscreen.value = false;
      isZenMode.value = false;
      isFocusMode.value = false;
      sidebarState.value.isVisible = true;
    };

    return {
      // 状态
      sidebarState: computed(() => sidebarState.value),
      searchState: computed(() => searchState.value),
      isFullscreen: computed(() => isFullscreen.value),
      isZenMode: computed(() => isZenMode.value),
      isFocusMode: computed(() => isFocusMode.value),

      // 计算属性
      activeSidebarTab,
      enabledSidebarTabs,

      // 动作
      toggleSidebar,
      setSidebarTab,
      setSidebarWidth,
      startSearch,
      finishSearch,
      clearSearch,
      selectSearchResult,
      toggleFullscreen,
      toggleZenMode,
      toggleFocusMode,
      exitSpecialModes,
    };
  },
  {
    persist: {
      key: 'editor-ui',
      storage: localStorage,
      paths: ['sidebarState', 'isFullscreen', 'isZenMode', 'isFocusMode'],
    },
  },
);

/**
 * 编辑器状态组合器
 * 提供统一的状态管理接口
 */
export const useEditorStore = () => {
  const documentStore = useEditorDocumentStore();
  const workspaceStore = useEditorWorkspaceStore();
  const uiStore = useEditorUIStore();

  // 组合动作
  const openDocument = (document: Document) => {
    documentStore.addDocument(document);
    documentStore.setActiveDocument(document.uuid);
  };

  const closeDocument = (documentUuid: string) => {
    const document = documentStore.documents.get(documentUuid);
    if (document?.isDirty) {
      // TODO: 显示保存确认对话框
      console.warn('Document has unsaved changes');
    }
    documentStore.removeDocument(documentUuid);
  };

  const switchToDocument = (documentUuid: string) => {
    documentStore.setActiveDocument(documentUuid);
  };

  const saveCurrentDocument = async () => {
    if (documentStore.activeDocumentUuid) {
      await documentStore.saveDocument(documentStore.activeDocumentUuid);
    }
  };

  const searchInWorkspace = async (query: string, searchType: string = 'fulltext') => {
    uiStore.startSearch(query, searchType);

    try {
      // TODO: 调用实际的搜索 API
      const mockResults = [
        { uuid: '1', title: 'Test Document 1', snippet: 'This is a test...' },
        { uuid: '2', title: 'Test Document 2', snippet: 'Another test...' },
      ];

      // 模拟搜索延迟
      await new Promise((resolve) => setTimeout(resolve, 500));

      uiStore.finishSearch(mockResults);
    } catch (error) {
      console.error('Search failed:', error);
      uiStore.finishSearch([]);
    }
  };

  return {
    // 子 store
    documentStore,
    workspaceStore,
    uiStore,

    // 组合动作
    openDocument,
    closeDocument,
    switchToDocument,
    saveCurrentDocument,
    searchInWorkspace,
  };
};
