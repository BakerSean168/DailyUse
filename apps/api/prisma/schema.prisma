generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model account {
  uuid                                String                                @id
  username                            String                                @unique
  email                               String                                @unique
  emailVerified Boolean                               @default(false) @map("email_verified")
  phoneNumber String? @map("phone_number")
  phoneVerified Boolean                               @default(false) @map("phone_verified")
  status                              String                                @default("ACTIVE")
  profile                             String
  preferences                         String
  subscription                        String?
  storage                             String
  security                            String
  history                             String                                @default("[]")
  stats                               String
  createdAt DateTime                              @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  lastActiveAt DateTime? @map("last_active_at")
  deletedAt DateTime? @map("deleted_at")
  authCredential                      authCredential[]
  authSession                         authSession[]
  editorWorkspaceSessionGroupTab editorWorkspaceSessionGroupTab[]
  editorWorkspaceSessionGroup     editorWorkspaceSessionGroup[]
  editorWorkspaceSession           editorWorkspaceSession[]
  editorWorkspace                   editorWorkspace[]
  focusMode                         FocusMode[]
  focusSession                      focusSession[]
  goalFolder                        goalFolder[]
  goalStatistic                     goalStatistic?
  goal                               goal[]
  reminderGroup                     reminderGroup[]
  reminderInstance                  reminderInstance[]
  reminderStatistic                 reminderStatistic?
  reminderTemplate                  reminderTemplate[]
  repository                        repository[]
  repositoryExplorer                repositoryExplorer[]
  repositoryStatistic               repositoryStatistic?
  scheduleStatistic                 scheduleStatistic?
  scheduleTask                      scheduleTask[]
  schedule                           schedule[]
  setting                            setting[]
  taskInstance                      taskInstance[]
  taskStatistic                     taskStatistic?
  taskTemplate                      taskTemplate[]
  userSetting                       userSetting?

  @@map("accounts")
  @@index([createdAt])
  @@index([email])
  @@index([lastActiveAt])
  @@index([status])
  @@index([username])
}

model appConfig {
  uuid        String   @id
  version     String   @unique
  config      String
  description String?
  isCurrent Boolean  @default(false) @map("is_current")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@index([version])

  @@map("app_configs")
}

model authCredential {
  uuid         String    @id
  accountUuid String @map("account_uuid")
  type         String
  data         String
  metadata     String
  history      String    @default("[]")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  expiresAt DateTime? @map("expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  revokedAt DateTime? @map("revoked_at")
  account      account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("auth_credentials")
  @@index([accountUuid])
  @@index([expiresAt])
  @@index([type])
}

model authSession {
  uuid                     String    @id
  accountUuid String @map("account_uuid")
  status                   String    @default("ACTIVE")
  accessToken String    @unique @map("access_token")
  accessTokenExpiresAt DateTime @map("access_token_expires_at")
  refreshToken String    @unique @map("refresh_token")
  refreshTokenExpiresAt DateTime @map("refresh_token_expires_at")
  device                   String
  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")
  history                  String    @default("[]")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  lastAccessedAt DateTime @map("last_accessed_at")
  revokedAt DateTime? @map("revoked_at")
  account                  account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("auth_sessions")
  @@index([accessTokenExpiresAt])
  @@index([accessToken])
  @@index([accountUuid])
  @@index([lastAccessedAt])
  @@index([refreshToken])
  @@index([status])
}

model editorWorkspaceSessionGroupTab {
  uuid                            String                          @id
  groupUuid String @map("group_uuid")
  sessionUuid String @map("session_uuid")
  workspaceUuid String @map("workspace_uuid")
  accountUuid String @map("account_uuid")
  documentUuid String? @map("document_uuid")
  tabIndex Int @map("tab_index")
  tabType String @map("tab_type")
  title                           String
  viewState Json @map("view_state")
  isPinned Boolean                         @default(false) @map("is_pinned")
  isActive Boolean                         @default(false) @map("is_active")
  createdAt DateTime                        @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  editorWorkspaceSessionGroup editorWorkspaceSessionGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@index([workspaceUuid])

  @@map("editor_workspace_session_group_tabs")
}

model editorWorkspaceSessionGroup {
  uuid                                String                                @id
  sessionUuid String @map("session_uuid")
  workspaceUuid String @map("workspace_uuid")
  accountUuid String @map("account_uuid")
  groupIndex Int @map("group_index")
  name                                String?
  splitDirection String @map("split_direction")
  createdAt DateTime                              @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  editorWorkspaceSessionGroupTab editorWorkspaceSessionGroupTab[]
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  editorWorkspaceSession           editorWorkspaceSession             @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade)

  @@index([workspaceUuid])

  @@map("editor_workspace_session_groups")
}

model editorWorkspaceSession {
  uuid                            String                            @id
  workspaceUuid String @map("workspace_uuid")
  accountUuid String @map("account_uuid")
  name                            String
  layout                          Json
  isActive Boolean                           @default(true) @map("is_active")
  createdAt DateTime                          @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  editorWorkspaceSessionGroup editorWorkspaceSessionGroup[]
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  editorWorkspace               editorWorkspace                 @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade)

  @@index([workspaceUuid])

  @@map("editor_workspace_sessions")
}

model editorWorkspace {
  uuid                      String                      @id
  accountUuid String @map("account_uuid")
  name                      String
  description               String?
  projectPath String                      @unique @map("project_path")
  projectType String @map("project_type")
  layout                    Json
  setting                  Json
  isActive Boolean                     @default(true) @map("is_active")
  createdAt DateTime                    @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  accessedAt DateTime                    @default(now()) @map("accessed_at")
  editorWorkspaceSession editorWorkspaceSession[]
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([isActive])

  @@map("editor_workspaces")
}

model focusSession {
  uuid                    String    @id
  accountUuid String @map("account_uuid")
  goalUuid String? @map("goal_uuid")
  status                  String    @default("DRAFT")
  durationMinutes Int @map("duration_minutes")
  actualDurationMinutes Int       @default(0) @map("actual_duration_minutes")
  description             String?
  startedAt DateTime? @map("started_at")
  pausedAt DateTime? @map("paused_at")
  resumedAt DateTime? @map("resumed_at")
  completedAt DateTime? @map("completed_at")
  cancelledAt DateTime? @map("cancelled_at")
  pauseCount Int       @default(0) @map("pause_count")
  pausedDurationMinutes Int       @default(0) @map("paused_duration_minutes")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goal                   goal?    @relation(fields: [goalUuid], references: [uuid])

  @@index([status])

  @@map("focus_sessions")
}

model FocusMode {
  uuid              String   @id
  accountUuid       String   @map("account_uuid")
  focusedGoalUuids  String[] @map("focused_goal_uuids")
  startTime         BigInt   @map("start_time")
  endTime           BigInt   @map("end_time")
  hiddenGoalsMode   String   @map("hidden_goals_mode")
  isActive          Boolean  @default(true) @map("is_active")
  actualEndTime     BigInt?  @map("actual_end_time")
  createdAt         BigInt   @map("created_at")
  updatedAt         BigInt   @map("updated_at")
  account           account  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([isActive])
  @@index([endTime])

  @@map("focus_modes")
}

model goalFolder {
  uuid                 String         @id
  accountUuid String @map("account_uuid")
  name                 String
  description          String?
  color                String?
  icon                 String?
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  completedGoalCount Int            @default(0) @map("completed_goal_count")
  folderType String? @map("folder_type")
  goalCount Int            @default(0) @map("goal_count")
  isSystemFolder Boolean        @default(false) @map("is_system_folder")
  parentFolderUuid String? @map("parent_folder_uuid")
  sortOrder Int            @default(0) @map("sort_order")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goalFolder         goalFolder?  @relation("goal_foldersTogoal_folders", fields: [parentFolderUuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  other_goal_folders   goalFolder[] @relation("goal_foldersTogoal_folders")
  goal                goal[]

  @@index([parentFolderUuid])

  @@map("goal_folders")
}

model goalRecord {
  uuid            String      @id
  keyResultUuid String @map("key_result_uuid")
  value           Float
  note            String?
  recordedAt DateTime @map("recorded_at")
  createdAt DateTime    @default(now()) @map("created_at")
  keyResult     keyResult @relation(fields: [keyResultUuid], references: [uuid], onDelete: Cascade)

  @@index([recordedAt])

  @@map("goal_records")
}

model goalReview {
  uuid            String   @id
  goalUuid String @map("goal_uuid")
  reviewType String @map("review_type")
  content         String
  achievements    String?
  challenges      String?
  lessonsLearned String? @map("lessons_learned")
  nextSteps String? @map("next_steps")
  rating          Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  goal           goal    @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)

  @@index([goalUuid])

  @@map("goal_reviews")
}

model goalStatistic {
  id                         Int      @id @default(autoincrement())
  accountUuid String   @unique @map("account_uuid")
  totalGoals Int      @default(0) @map("total_goals")
  activeGoals Int      @default(0) @map("active_goals")
  completedGoals Int      @default(0) @map("completed_goals")
  archivedGoals Int      @default(0) @map("archived_goals")
  overdueGoals Int      @default(0) @map("overdue_goals")
  totalKeyResults Int      @default(0) @map("total_key_results")
  completedKeyResults Int      @default(0) @map("completed_key_results")
  averageProgress Float    @default(0) @map("average_progress")
  goalsByImportance String   @default("{}") @map("goals_by_importance")
  goalsByUrgency String   @default("{}") @map("goals_by_urgency")
  goalsByCategory String   @default("{}") @map("goals_by_category")
  goalsByStatus String   @default("{}") @map("goals_by_status")
  goalsCreatedThisWeek Int      @default(0) @map("goals_created_this_week")
  goalsCompletedThisWeek Int      @default(0) @map("goals_completed_this_week")
  goalsCreatedThisMonth Int      @default(0) @map("goals_created_this_month")
  goalsCompletedThisMonth Int      @default(0) @map("goals_completed_this_month")
  totalReviews Int      @default(0) @map("total_reviews")
  averageRating Float? @map("average_rating")
  totalFocusSessions Int      @default(0) @map("total_focus_sessions")
  completedFocusSessions Int      @default(0) @map("completed_focus_sessions")
  totalFocusMinutes Int      @default(0) @map("total_focus_minutes")
  lastCalculatedAt DateTime @default(now()) @map("last_calculated_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])

  @@map("goal_statistics")
}

model goal {
  uuid                        String                        @id
  accountUuid String @map("account_uuid")
  title                       String
  description                 String?
  status                      String                        @default("pending")
  importance                  Int                           @default(2)
  urgency                     Int                           @default(2)
  category                    String?
  tags                        String?
  startDate DateTime? @map("start_date")
  targetDate DateTime? @map("target_date")
  completedAt DateTime? @map("completed_at")
  archivedAt DateTime? @map("archived_at")
  folderUuid String? @map("folder_uuid")
  parentGoalUuid String? @map("parent_goal_uuid")
  sortOrder Int                           @default(0) @map("sort_order")
  reminderConfig String? @map("reminder_config")
  createdAt DateTime                      @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  color                       String?
  feasibilityAnalysis String? @map("feasibility_analysis")
  motivation                  String?
  focusSession              focusSession[]
  goalReview                goalReview[]
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goalFolder                goalFolder?                 @relation(fields: [folderUuid], references: [uuid])
  goal                       goal?                        @relation("goalsTogoals", fields: [parentGoalUuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  other_goals                 goal[]                       @relation("goalsTogoals")
  keyResultWeightSnapshot keyResultWeightSnapshot[]
  keyResult                 keyResult[]
  taskTemplate              taskTemplate[]

  @@index([targetDate])

  @@map("goals")
}

model keyResultWeightSnapshot {
  uuid            String      @id
  goalUuid String @map("goal_uuid")
  keyResultUuid String @map("key_result_uuid")
  oldWeight Float @map("old_weight")
  newWeight Float @map("new_weight")
  weightDelta Float @map("weight_delta")
  snapshotTime BigInt @map("snapshot_time")
  trigger         String
  reason          String?
  operatorUuid String @map("operator_uuid")
  createdAt DateTime    @default(now()) @map("created_at")
  goal           goal       @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)
  keyResult     keyResult @relation(fields: [keyResultUuid], references: [uuid], onDelete: Cascade)

  @@index([snapshotTime])

  @@map("key_result_weight_snapshots")
}

model keyResult {
  uuid                        String                        @id
  goalUuid String @map("goal_uuid")
  title                       String
  description                 String?
  valueType String @map("value_type")
  aggregationMethod String @map("aggregation_method")
  targetValue Float @map("target_value")
  currentValue Float                         @default(0) @map("current_value")
  unit                        String?
  weight                      Float                         @default(1)
  order                       Int                           @default(0)
  createdAt DateTime                      @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  goalRecord                goalRecord[]
  keyResultWeightSnapshot keyResultWeightSnapshot[]
  goal                       goal                         @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)
  taskTemplate              taskTemplate[]

  @@index([goalUuid])

  @@map("key_results")
}

model linkedContent {
  uuid                 String               @id
  resourceUuid String @map("resource_uuid")
  title                String
  url                  String
  contentType String @map("content_type")
  description          String?
  thumbnail            String?
  author               String?
  publishedAt DateTime? @map("published_at")
  isAccessible Boolean              @default(true) @map("is_accessible")
  lastCheckedAt DateTime? @map("last_checked_at")
  cachedAt DateTime? @map("cached_at")
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  repositoryResource repositoryResource @relation(fields: [resourceUuid], references: [uuid], onDelete: Cascade)

  @@index([url])

  @@map("linked_contents")
}

model notificationChannel {
  uuid              String        @id
  notificationUuid String @map("notification_uuid")
  channelType String @map("channel_type")
  status            String
  recipient         String?
  maxRetries Int           @default(3) @map("max_retries")
  error             String?
  response          String?
  retryCount Int           @default(0) @map("retry_count")
  notification     notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])

  @@map("notification_channels")
}

model notificationHistory {
  uuid              String        @id
  notificationUuid String @map("notification_uuid")
  action            String
  details           String?
  actorUuid String? @map("actor_uuid")
  createdAt DateTime      @default(now()) @map("created_at")
  notification     notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])

  @@map("notification_history")
}

model notificationPreference {
  uuid           String   @id
  accountUuid String   @unique @map("account_uuid")
  enabled        Boolean  @default(true)
  channels       String
  categories     String
  doNotDisturb String? @map("do_not_disturb")
  rateLimit String? @map("rate_limit")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@index([accountUuid])

  @@map("notification_preferences")
}

model notificationTemplate {
  uuid             String   @id
  name             String   @unique
  displayName String @map("display_name")
  description      String?
  type             String
  category         String
  titleTemplate String @map("title_template")
  contentTemplate String @map("content_template")
  variables        String?
  defaultActions String? @map("default_actions")
  isSystem Boolean  @default(false) @map("is_system")
  isActive Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@index([name])

  @@map("notification_templates")
}

model notification {
  uuid                  String                  @id
  accountUuid String @map("account_uuid")
  type                  String
  category              String
  status                String
  title                 String
  content               String
  importance            String
  urgency               String
  relatedEntityType String? @map("related_entity_type")
  relatedEntityUuid String? @map("related_entity_uuid")
  metadata              String?
  actions               String?
  readAt DateTime? @map("read_at")
  sentAt DateTime? @map("sent_at")
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime                @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isRead Boolean                 @default(false) @map("is_read")
  notificationChannel notificationChannel[]
  notificationHistory  notificationHistory[]

  @@index([status])

  @@map("notifications")
}

model reminderGroup {
  uuid               String               @id
  accountUuid String @map("account_uuid")
  name               String
  description        String?
  color              String?
  icon               String?
  controlMode String @map("control_mode")
  enabled            Boolean
  status             String
  order              Int
  stats              String
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  reminderTemplate reminderTemplate[]

  @@index([accountUuid])

  @@map("reminder_groups")
}

model reminderHistory {
  uuid                  String             @id
  templateUuid String @map("template_uuid")
  triggeredAt DateTime @map("triggered_at")
  result                String
  error                 String?
  notificationSent Boolean @map("notification_sent")
  notificationChannel String?
  createdAt DateTime           @default(now()) @map("created_at")
  reminderTemplate    reminderTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([templateUuid])

  @@map("reminder_history")
}

model reminderInstance {
  uuid               String             @id
  templateUuid String @map("template_uuid")
  accountUuid String @map("account_uuid")
  triggerAt DateTime @map("trigger_at")
  status             String
  result             String?
  processedAt DateTime? @map("processed_at")
  note               String?
  payload            String?
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  reminderTemplate reminderTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([triggerAt])

  @@map("reminder_instances")
}

model reminderStatistic {
  uuid           String   @id
  accountUuid String   @unique @map("account_uuid")
  templateStats String @map("template_stats")
  groupStats String @map("group_stats")
  triggerStats String @map("trigger_stats")
  calculatedAt DateTime @map("calculated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])

  @@map("reminder_statistics")
}

model reminderTemplate {
  uuid                String               @id
  accountUuid String @map("account_uuid")
  title               String
  description         String?
  type                String
  selfEnabled Boolean @map("self_enabled")
  status              String
  groupUuid String? @map("group_uuid")
  importanceLevel String @map("importance_level")
  tags                String
  color               String?
  icon                String?
  nextTriggerAt DateTime? @map("next_trigger_at")
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  trigger             String
  recurrence          String?
  activeTime String @map("active_time")
  activeHours String? @map("active_hours")
  notificationConfig String @map("notification_config")
  stats               String
  reminderHistory    reminderHistory[]
  reminderInstance  reminderInstance[]
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  reminderGroup     reminderGroup?     @relation(fields: [groupUuid], references: [uuid])

  @@index([status])

  @@map("reminder_templates")
}

model repository {
  uuid                 String                 @id
  accountUuid String @map("account_uuid")
  name                 String
  type                 String
  path                 String
  description          String?
  config               String
  relatedGoals String? @map("related_goals")
  status               String                 @default("active")
  git                  String?
  syncStatus String? @map("sync_status")
  stats                String
  lastAccessedAt DateTime? @map("last_accessed_at")
  createdAt DateTime               @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  repositoryExplorer repositoryExplorer[]
  repositoryResource repositoryResource[]

  @@unique([accountUuid, path])
  @@index([type])

  @@map("repositories")
}

model repositoryExplorer {
  uuid            String       @id
  repositoryUuid String @map("repository_uuid")
  accountUuid String @map("account_uuid")
  name            String
  description     String?
  currentPath String @map("current_path")
  filters         String?
  viewConfig String? @map("view_config")
  pinnedPaths String? @map("pinned_paths")
  recentPaths String? @map("recent_paths")
  lastScanAt DateTime? @map("last_scan_at")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  repository    repository @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)

  @@unique([repositoryUuid, accountUuid])
  @@index([repositoryUuid])

  @@map("repository_explorers")
}

model repositoryResource {
  uuid                                                                               String                @id
  repositoryUuid String @map("repository_uuid")
  name                                                                               String
  type                                                                               String
  path                                                                               String
  size                                                                               Int?
  description                                                                        String?
  author                                                                             String?
  version                                                                            String?
  tags                                                                               String?
  category                                                                           String?
  status                                                                             String                @default("active")
  metadata                                                                           String?
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  modifiedAt DateTime? @map("modified_at")
  linkedContent                                                                    linkedContent[]
  repository                                                                       repository          @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  resource_references_resource_references_source_resource_uuidTorepository_resources resourceReference[] @relation("resource_references_source_resource_uuidTorepository_resources")
  resource_references_resource_references_target_resource_uuidTorepository_resources resourceReference[] @relation("resource_references_target_resource_uuidTorepository_resources")

  @@unique([repositoryUuid, path])
  @@index([type])

  @@map("repository_resources")
}

model repositoryStatistic {
  id                    Int      @id @default(autoincrement())
  accountUuid String   @unique @map("account_uuid")
  totalRepositories Int      @default(0) @map("total_repositories")
  activeRepositories Int      @default(0) @map("active_repositories")
  archivedRepositories Int      @default(0) @map("archived_repositories")
  totalResources Int      @default(0) @map("total_resources")
  totalFiles Int      @default(0) @map("total_files")
  totalFolders Int      @default(0) @map("total_folders")
  gitEnabledRepos Int      @default(0) @map("git_enabled_repos")
  totalCommits Int      @default(0) @map("total_commits")
  totalReferences Int      @default(0) @map("total_references")
  totalLinkedContents Int      @default(0) @map("total_linked_contents")
  totalSizeBytes BigInt   @default(0) @map("total_size_bytes")
  lastUpdatedAt DateTime @default(now()) @map("last_updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])

  @@map("repository_statistics")
}

model resourceReference {
  uuid                                                                                String               @id
  sourceResourceUuid String @map("source_resource_uuid")
  targetResourceUuid String @map("target_resource_uuid")
  referenceType String @map("reference_type")
  description                                                                         String?
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  lastVerifiedAt DateTime? @map("last_verified_at")
  repository_resources_resource_references_source_resource_uuidTorepository_resources repositoryResource @relation("resource_references_source_resource_uuidTorepository_resources", fields: [sourceResourceUuid], references: [uuid], onDelete: Cascade)
  repository_resources_resource_references_target_resource_uuidTorepository_resources repositoryResource @relation("resource_references_target_resource_uuidTorepository_resources", fields: [targetResourceUuid], references: [uuid], onDelete: Cascade)

  @@unique([sourceResourceUuid, targetResourceUuid, referenceType])
  @@index([targetResourceUuid])

  @@map("resource_references")
}

model scheduleExecution {
  uuid           String         @id
  taskUuid String @map("task_uuid")
  executionTime DateTime @map("execution_time")
  status         String
  duration       Int?
  result         String?
  error          String?
  retryCount Int            @default(0) @map("retry_count")
  createdAt DateTime       @default(now()) @map("created_at")
  scheduleTask scheduleTask @relation(fields: [taskUuid], references: [uuid], onDelete: Cascade)

  @@index([taskUuid])

  @@map("schedule_executions")
}

model scheduleStatistic {
  id                     Int      @id @default(autoincrement())
  accountUuid String   @unique @map("account_uuid")
  totalTasks Int @map("total_tasks")
  activeTasks Int @map("active_tasks")
  pausedTasks Int @map("paused_tasks")
  completedTasks Int @map("completed_tasks")
  cancelledTasks Int @map("cancelled_tasks")
  failedTasks Int @map("failed_tasks")
  totalExecutions Int @map("total_executions")
  successfulExecutions Int @map("successful_executions")
  failedExecutions Int @map("failed_executions")
  skippedExecutions Int @map("skipped_executions")
  timeoutExecutions Int @map("timeout_executions")
  avgExecutionDuration Float @map("avg_execution_duration")
  minExecutionDuration Float @map("min_execution_duration")
  maxExecutionDuration Float @map("max_execution_duration")
  moduleStatistics String   @default("{}") @map("module_statistics")
  lastUpdatedAt DateTime @map("last_updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])

  @@map("schedule_statistics")
}

model scheduleTask {
  uuid                    String                @id
  accountUuid String @map("account_uuid")
  name                    String
  description             String?
  sourceModule String @map("source_module")
  sourceEntityId String @map("source_entity_id")
  status                  String
  enabled                 Boolean
  cronExpression String? @map("cron_expression")
  timezone                String
  startDate DateTime? @map("start_date")
  endDate DateTime? @map("end_date")
  maxExecutions Int? @map("max_executions")
  nextRunAt DateTime? @map("next_run_at")
  lastRunAt DateTime? @map("last_run_at")
  executionCount Int                   @default(0) @map("execution_count")
  lastExecutionStatus String? @map("last_execution_status")
  lastExecutionDuration Int? @map("last_execution_duration")
  consecutiveFailures Int                   @default(0) @map("consecutive_failures")
  maxRetries Int @map("max_retries")
  initialDelayMs Int @map("initial_delay_ms")
  maxDelayMs Int @map("max_delay_ms")
  backoffMultiplier Float @map("backoff_multiplier")
  retryableStatuses String                @default("[]") @map("retryable_statuses")
  payload                 String?
  tags                    String                @default("[]")
  priority                String
  timeout                 Int
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  scheduleExecution     scheduleExecution[]
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([status])

  @@map("schedule_tasks")
}

model schedule {
  uuid                  String   @id
  accountUuid String @map("account_uuid")
  title                 String
  description           String?
  startTime BigInt @map("start_time")
  endTime BigInt @map("end_time")
  duration              Int
  hasConflict Boolean  @default(false) @map("has_conflict")
  conflictingSchedules String? @map("conflicting_schedules")
  priority              Int?
  location              String?
  attendees             String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([startTime, endTime])

  @@map("schedules")
}

model settingGroup {
  uuid                 String           @id
  key                  String           @unique
  name                 String
  description          String?
  parentUuid String? @map("parent_uuid")
  order                Int              @default(0)
  icon                 String?
  isCollapsed Boolean          @default(false) @map("is_collapsed")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  settingGroup       settingGroup?  @relation("setting_groupsTosetting_groups", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  other_setting_groups settingGroup[] @relation("setting_groupsTosetting_groups")
  settingItem        settingItem[]
  setting             setting[]

  @@index([parentUuid])

  @@map("setting_groups")
}

model settingItem {
  uuid           String         @id
  groupUuid String @map("group_uuid")
  settingKey String @map("setting_key")
  order          Int            @default(0)
  isVisible Boolean        @default(true) @map("is_visible")
  customLabel String? @map("custom_label")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  settingGroup settingGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@unique([groupUuid, settingKey])
  @@index([settingKey])

  @@map("setting_items")
}

model setting {
  uuid              String          @id
  key               String
  name              String
  description       String?
  valueType String @map("value_type")
  value             String
  defaultValue String @map("default_value")
  scope             String
  accountUuid String? @map("account_uuid")
  deviceId String? @map("device_id")
  groupUuid String? @map("group_uuid")
  validation        String?
  ui                String?
  isEncrypted Boolean         @default(false) @map("is_encrypted")
  isReadOnly Boolean         @default(false) @map("is_read_only")
  isSystemSetting Boolean         @default(false) @map("is_system_setting")
  syncConfig String? @map("sync_config")
  historyData String          @default("[]") @map("history_data")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  account           account?        @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  settingGroup    settingGroup? @relation(fields: [groupUuid], references: [uuid])

  @@unique([key, scope, accountUuid, deviceId])
  @@index([scope])

  @@map("settings")
}

model taskDependency {
  uuid                                                                   String         @id
  predecessorTaskUuid String @map("predecessor_task_uuid")
  successorTaskUuid String @map("successor_task_uuid")
  dependencyType String         @default("FINISH_TO_START") @map("dependency_type")
  lagDays Int? @map("lag_days")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  task_templates_task_dependencies_predecessor_task_uuidTotask_templates taskTemplate @relation("task_dependencies_predecessor_task_uuidTotask_templates", fields: [predecessorTaskUuid], references: [uuid], onDelete: Cascade)
  task_templates_task_dependencies_successor_task_uuidTotask_templates   taskTemplate @relation("task_dependencies_successor_task_uuidTotask_templates", fields: [successorTaskUuid], references: [uuid], onDelete: Cascade)

  @@unique([predecessorTaskUuid, successorTaskUuid])
  @@index([successorTaskUuid])

  @@map("task_dependencies")
}

model taskInstance {
  uuid              String         @id
  templateUuid String @map("template_uuid")
  accountUuid String @map("account_uuid")
  instanceDate DateTime @map("instance_date")
  status            String
  note              String?
  actualStartTime DateTime? @map("actual_start_time")
  actualEndTime DateTime? @map("actual_end_time")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  timeConfig String @map("time_config")
  completionRecord String? @map("completion_record")
  skipRecord String? @map("skip_record")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  taskTemplate    taskTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([templateUuid, instanceDate])

  @@map("task_instances")
}

model taskStatistic {
  uuid                       String   @id
  accountUuid String   @unique @map("account_uuid")
  calculatedAt DateTime @map("calculated_at")
  templateTotal Int @map("template_total")
  templateActive Int @map("template_active")
  templatePaused Int @map("template_paused")
  templateArchived Int @map("template_archived")
  templateOneTime Int @map("template_one_time")
  templateRecurring Int @map("template_recurring")
  instanceTotal Int @map("instance_total")
  instanceToday Int @map("instance_today")
  instanceWeek Int @map("instance_week")
  instanceMonth Int @map("instance_month")
  instancePending Int @map("instance_pending")
  instanceInProgress Int @map("instance_in_progress")
  instanceCompleted Int @map("instance_completed")
  instanceSkipped Int @map("instance_skipped")
  instanceExpired Int @map("instance_expired")
  completionToday Int @map("completion_today")
  completionWeek Int @map("completion_week")
  completionMonth Int @map("completion_month")
  completionTotal Int @map("completion_total")
  completionAvgTime Float? @map("completion_avg_time")
  completionRate Float @map("completion_rate")
  timeAllDay Int @map("time_all_day")
  timePoint Int @map("time_point")
  timeRange Int @map("time_range")
  timeOverdue Int @map("time_overdue")
  timeUpcoming Int @map("time_upcoming")
  distributionByImportance String @map("distribution_by_importance")
  distributionByUrgency String @map("distribution_by_urgency")
  distributionByFolder String @map("distribution_by_folder")
  distributionByTag String @map("distribution_by_tag")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])

  @@map("task_statistics")
}

model taskTemplateHistory {
  uuid           String         @id
  templateUuid String @map("template_uuid")
  action         String
  changes        String?
  createdAt DateTime       @default(now()) @map("created_at")
  taskTemplate taskTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([templateUuid])

  @@map("task_template_history")
}

model taskTemplate {
  uuid                                                                      String                  @id
  accountUuid String @map("account_uuid")
  title                                                                     String
  description                                                               String?
  taskType String @map("task_type") // 'ONE_TIME' | 'RECURRING'
  status                                                                    String
  importance                                                                Int // ImportanceLevel (0-4)
  urgency                                                                   Int // UrgencyLevel (0-4)
  color                                                                     String?
  tags                                                                      String // JSON: string[]
  folderUuid String? @map("folder_uuid")
  
  // === Goal/KR 关联（适用于所有任务） ===
  goalUuid String? @map("goal_uuid")
  keyResultUuid String? @map("key_result_uuid")
  
  // === 子任务支持（适用于所有任务） ===
  parentTaskUuid String? @map("parent_task_uuid")
  
  // === 一次性任务专用字段 ===
  startDate BigInt? @map("start_date") // Unix timestamp (ms)
  dueDate BigInt? @map("due_date") // Unix timestamp (ms)
  completedAt BigInt? @map("completed_at") // Unix timestamp (ms)
  estimatedMinutes Int? @map("estimated_minutes")
  actualMinutes Int? @map("actual_minutes")
  note String? @db.Text
  
  // === 循环任务专用字段 ===
  lastGeneratedDate DateTime? @map("last_generated_date")
  generateAheadDays Int? @map("generate_ahead_days")
  
  // === 时间配置（循环任务用） ===
  timeConfigType String? @map("time_config_type")
  timeConfigStartTime DateTime? @map("time_config_start_time")
  timeConfigEndTime DateTime? @map("time_config_end_time")
  timeConfigDurationMinutes Int? @map("time_config_duration_minutes")
  
  // === 重复规则（循环任务用） ===
  recurrenceRuleType String? @map("recurrence_rule_type")
  recurrenceRuleInterval Int? @map("recurrence_rule_interval")
  recurrenceRuleDaysOfWeek String? @map("recurrence_rule_days_of_week")
  recurrenceRuleDayOfMonth Int? @map("recurrence_rule_day_of_month")
  recurrenceRuleMonthOfYear Int? @map("recurrence_rule_month_of_year")
  recurrenceRuleEndDate DateTime? @map("recurrence_rule_end_date")
  recurrenceRuleCount Int? @map("recurrence_rule_count")
  
  // === 提醒配置（循环任务用） ===
  reminderConfigEnabled Boolean? @map("reminder_config_enabled")
  reminderConfigTimeOffsetMinutes Int? @map("reminder_config_time_offset_minutes")
  reminderConfigUnit String? @map("reminder_config_unit")
  reminderConfigChannel String? @map("reminder_config_channel")
  
  // === Goal 绑定（循环任务用） ===
  goalBindingGoalUuid String? @map("goal_binding_goal_uuid")
  goalBindingKeyResultUuid String? @map("goal_binding_key_result_uuid")
  goalBindingIncrementValue Float? @map("goal_binding_increment_value")
  
  // === 依赖关系（适用于所有任务） ===
  blockingReason String? @map("blocking_reason")
  dependencyStatus String @default("NONE") @map("dependency_status")
  isBlocked Boolean @default(false) @map("is_blocked")
  
  // === 审计字段 ===
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  
  // === 关系 ===
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goal goal? @relation(fields: [goalUuid], references: [uuid], onDelete: SetNull)
  keyResult keyResult? @relation(fields: [keyResultUuid], references: [uuid], onDelete: SetNull)
  
  // 子任务关系
  parentTask taskTemplate? @relation("TaskSubtasks", fields: [parentTaskUuid], references: [uuid], onDelete: SetNull)
  subtasks taskTemplate[] @relation("TaskSubtasks")
  
  // 依赖关系
  task_dependencies_task_dependencies_predecessor_task_uuidTotask_templates taskDependency[] @relation("task_dependencies_predecessor_task_uuidTotask_templates")
  task_dependencies_task_dependencies_successor_task_uuidTotask_templates   taskDependency[] @relation("task_dependencies_successor_task_uuidTotask_templates")
  
  // 实例（仅 RECURRING 生成）
  taskInstance                                                            taskInstance[]
  taskTemplateHistory                                                     taskTemplateHistory[]

  // === 索引 ===
  @@index([accountUuid])
  @@index([taskType])
  @@index([status])
  @@index([importance])
  @@index([urgency])
  @@index([goalUuid])
  @@index([keyResultUuid])
  @@index([parentTaskUuid])
  @@index([dueDate])
  @@index([deletedAt])

  @@map("task_templates")
}

model userSetting {
  uuid                           String   @id
  accountUuid String   @unique @map("account_uuid")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  appearanceAccentColor String   @default("#3B82F6") @map("appearance_accent_color")
  appearanceCompactMode Boolean  @default(false) @map("appearance_compact_mode")
  appearanceFontFamily String? @map("appearance_font_family")
  appearanceFontSize String   @default("MEDIUM") @map("appearance_font_size")
  appearanceTheme String   @default("AUTO") @map("appearance_theme")
  experimentalEnabled Boolean  @default(false) @map("experimental_enabled")
  experimentalFeatures String   @default("[]") @map("experimental_features")
  localeCurrency String   @default("CNY") @map("locale_currency")
  localeDateFormat String   @default("YYYY-MM-DD") @map("locale_date_format")
  localeLanguage String   @default("zh-CN") @map("locale_language")
  localeTimeFormat String   @default("24H") @map("locale_time_format")
  localeTimezone String   @default("Asia/Shanghai") @map("locale_timezone")
  localeWeekStartsOn Int      @default(1) @map("locale_week_starts_on")
  privacyAllowSearchByEmail Boolean  @default(true) @map("privacy_allow_search_by_email")
  privacyAllowSearchByPhone Boolean  @default(false) @map("privacy_allow_search_by_phone")
  privacyProfileVisibility String   @default("PRIVATE") @map("privacy_profile_visibility")
  privacyShareUsageData Boolean  @default(false) @map("privacy_share_usage_data")
  privacyShowOnlineStatus Boolean  @default(true) @map("privacy_show_online_status")
  shortcutsCustom String   @default("{}") @map("shortcuts_custom")
  shortcutsEnabled Boolean  @default(true) @map("shortcuts_enabled")
  workflowAutoSave Boolean  @default(true) @map("workflow_auto_save")
  workflowAutoSaveInterval Int      @default(30000) @map("workflow_auto_save_interval")
  workflowConfirmBeforeDelete Boolean  @default(true) @map("workflow_confirm_before_delete")
  workflowDefaultGoalView String   @default("LIST") @map("workflow_default_goal_view")
  workflowDefaultScheduleView String   @default("WEEK") @map("workflow_default_schedule_view")
  workflowDefaultTaskView String   @default("LIST") @map("workflow_default_task_view")
  account account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])

  @@map("user_settings")
}
