generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model accounts {
  uuid                                String                                @id
  username                            String                                @unique
  email                               String                                @unique
  email_verified                      Boolean                               @default(false)
  phone_number                        String?
  phone_verified                      Boolean                               @default(false)
  status                              String                                @default("ACTIVE")
  profile                             String
  preferences                         String
  subscription                        String?
  storage                             String
  security                            String
  history                             String                                @default("[]")
  stats                               String
  created_at                          DateTime                              @default(now())
  updated_at                          DateTime
  last_active_at                      DateTime?
  deleted_at                          DateTime?
  auth_credentials                    auth_credentials[]
  auth_sessions                       auth_sessions[]
  editor_workspace_session_group_tabs editor_workspace_session_group_tabs[]
  editor_workspace_session_groups     editor_workspace_session_groups[]
  editor_workspace_sessions           editor_workspace_sessions[]
  editor_workspaces                   editor_workspaces[]
  focus_sessions                      focus_sessions[]
  goal_folders                        goal_folders[]
  goal_statistics                     goal_statistics?
  goals                               goals[]
  reminder_groups                     reminder_groups[]
  reminder_instances                  reminder_instances[]
  reminder_statistics                 reminder_statistics?
  reminder_templates                  reminder_templates[]
  repositories                        repositories[]
  repository_explorers                repository_explorers[]
  repository_statistics               repository_statistics?
  schedule_statistics                 schedule_statistics?
  schedule_tasks                      schedule_tasks[]
  schedules                           schedules[]
  settings                            settings[]
  task_instances                      task_instances[]
  task_statistics                     task_statistics?
  task_templates                      task_templates[]
  user_settings                       user_settings?

  @@index([created_at])
  @@index([email])
  @@index([last_active_at])
  @@index([status])
  @@index([username])
}

model app_configs {
  uuid        String   @id
  version     String   @unique
  config      String
  description String?
  is_current  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime

  @@index([is_current])
  @@index([version])
}

model auth_credentials {
  uuid         String    @id
  account_uuid String
  type         String
  data         String
  metadata     String
  history      String    @default("[]")
  created_at   DateTime  @default(now())
  updated_at   DateTime
  expires_at   DateTime?
  last_used_at DateTime?
  revoked_at   DateTime?
  accounts     accounts  @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([expires_at])
  @@index([type])
}

model auth_sessions {
  uuid                     String    @id
  account_uuid             String
  status                   String    @default("ACTIVE")
  access_token             String    @unique
  access_token_expires_at  DateTime
  refresh_token            String    @unique
  refresh_token_expires_at DateTime
  device                   String
  ip_address               String?
  user_agent               String?
  history                  String    @default("[]")
  created_at               DateTime  @default(now())
  updated_at               DateTime
  last_accessed_at         DateTime
  revoked_at               DateTime?
  accounts                 accounts  @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([access_token_expires_at])
  @@index([access_token])
  @@index([account_uuid])
  @@index([last_accessed_at])
  @@index([refresh_token])
  @@index([status])
}

model editor_workspace_session_group_tabs {
  uuid                            String                          @id
  group_uuid                      String
  session_uuid                    String
  workspace_uuid                  String
  account_uuid                    String
  document_uuid                   String?
  tab_index                       Int
  tab_type                        String
  title                           String
  view_state                      Json
  is_pinned                       Boolean                         @default(false)
  is_active                       Boolean                         @default(false)
  created_at                      DateTime                        @default(now())
  updated_at                      DateTime
  accounts                        accounts                        @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  editor_workspace_session_groups editor_workspace_session_groups @relation(fields: [group_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([document_uuid])
  @@index([group_uuid])
  @@index([session_uuid])
  @@index([workspace_uuid])
}

model editor_workspace_session_groups {
  uuid                                String                                @id
  session_uuid                        String
  workspace_uuid                      String
  account_uuid                        String
  group_index                         Int
  name                                String?
  split_direction                     String
  created_at                          DateTime                              @default(now())
  updated_at                          DateTime
  editor_workspace_session_group_tabs editor_workspace_session_group_tabs[]
  accounts                            accounts                              @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  editor_workspace_sessions           editor_workspace_sessions             @relation(fields: [session_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([session_uuid])
  @@index([workspace_uuid])
}

model editor_workspace_sessions {
  uuid                            String                            @id
  workspace_uuid                  String
  account_uuid                    String
  name                            String
  layout                          Json
  is_active                       Boolean                           @default(true)
  created_at                      DateTime                          @default(now())
  updated_at                      DateTime
  editor_workspace_session_groups editor_workspace_session_groups[]
  accounts                        accounts                          @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  editor_workspaces               editor_workspaces                 @relation(fields: [workspace_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([is_active])
  @@index([workspace_uuid])
}

model editor_workspaces {
  uuid                      String                      @id
  account_uuid              String
  name                      String
  description               String?
  project_path              String                      @unique
  project_type              String
  layout                    Json
  settings                  Json
  is_active                 Boolean                     @default(true)
  created_at                DateTime                    @default(now())
  updated_at                DateTime
  accessed_at               DateTime                    @default(now())
  editor_workspace_sessions editor_workspace_sessions[]
  accounts                  accounts                    @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([accessed_at])
  @@index([account_uuid])
  @@index([is_active])
}

model focus_sessions {
  uuid                    String    @id
  account_uuid            String
  goal_uuid               String?
  status                  String    @default("DRAFT")
  duration_minutes        Int
  actual_duration_minutes Int       @default(0)
  description             String?
  started_at              DateTime?
  paused_at               DateTime?
  resumed_at              DateTime?
  completed_at            DateTime?
  cancelled_at            DateTime?
  pause_count             Int       @default(0)
  paused_duration_minutes Int       @default(0)
  created_at              DateTime  @default(now())
  updated_at              DateTime
  accounts                accounts  @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  goals                   goals?    @relation(fields: [goal_uuid], references: [uuid])

  @@index([account_uuid])
  @@index([account_uuid, status])
  @@index([created_at])
  @@index([goal_uuid])
  @@index([status])
}

model goal_folders {
  uuid                 String         @id
  account_uuid         String
  name                 String
  description          String?
  color                String?
  icon                 String?
  created_at           DateTime       @default(now())
  updated_at           DateTime
  deleted_at           DateTime?
  completed_goal_count Int            @default(0)
  folder_type          String?
  goal_count           Int            @default(0)
  is_system_folder     Boolean        @default(false)
  parent_folder_uuid   String?
  sort_order           Int            @default(0)
  accounts             accounts       @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  goal_folders         goal_folders?  @relation("goal_foldersTogoal_folders", fields: [parent_folder_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  other_goal_folders   goal_folders[] @relation("goal_foldersTogoal_folders")
  goals                goals[]

  @@index([account_uuid, deleted_at])
  @@index([account_uuid])
  @@index([account_uuid, sort_order])
  @@index([parent_folder_uuid])
}

model goal_records {
  uuid            String      @id
  key_result_uuid String
  value           Float
  note            String?
  recorded_at     DateTime
  created_at      DateTime    @default(now())
  key_results     key_results @relation(fields: [key_result_uuid], references: [uuid], onDelete: Cascade)

  @@index([key_result_uuid])
  @@index([recorded_at])
}

model goal_reviews {
  uuid            String   @id
  goal_uuid       String
  review_type     String
  content         String
  achievements    String?
  challenges      String?
  lessons_learned String?
  next_steps      String?
  rating          Int?
  created_at      DateTime @default(now())
  updated_at      DateTime
  goals           goals    @relation(fields: [goal_uuid], references: [uuid], onDelete: Cascade)

  @@index([created_at])
  @@index([goal_uuid])
}

model goal_statistics {
  id                         Int      @id @default(autoincrement())
  account_uuid               String   @unique
  total_goals                Int      @default(0)
  active_goals               Int      @default(0)
  completed_goals            Int      @default(0)
  archived_goals             Int      @default(0)
  overdue_goals              Int      @default(0)
  total_key_results          Int      @default(0)
  completed_key_results      Int      @default(0)
  average_progress           Float    @default(0)
  goals_by_importance        String   @default("{}")
  goals_by_urgency           String   @default("{}")
  goals_by_category          String   @default("{}")
  goals_by_status            String   @default("{}")
  goals_created_this_week    Int      @default(0)
  goals_completed_this_week  Int      @default(0)
  goals_created_this_month   Int      @default(0)
  goals_completed_this_month Int      @default(0)
  total_reviews              Int      @default(0)
  average_rating             Float?
  total_focus_sessions       Int      @default(0)
  completed_focus_sessions   Int      @default(0)
  total_focus_minutes        Int      @default(0)
  last_calculated_at         DateTime @default(now())
  created_at                 DateTime @default(now())
  updated_at                 DateTime
  accounts                   accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
}

model goals {
  uuid                        String                        @id
  account_uuid                String
  title                       String
  description                 String?
  status                      String                        @default("pending")
  importance                  Int                           @default(2)
  urgency                     Int                           @default(2)
  category                    String?
  tags                        String?
  start_date                  DateTime?
  target_date                 DateTime?
  completed_at                DateTime?
  archived_at                 DateTime?
  folder_uuid                 String?
  parent_goal_uuid            String?
  sort_order                  Int                           @default(0)
  reminder_config             String?
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime
  deleted_at                  DateTime?
  color                       String?
  feasibility_analysis        String?
  motivation                  String?
  focus_sessions              focus_sessions[]
  goal_reviews                goal_reviews[]
  accounts                    accounts                      @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  goal_folders                goal_folders?                 @relation(fields: [folder_uuid], references: [uuid])
  goals                       goals?                        @relation("goalsTogoals", fields: [parent_goal_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  other_goals                 goals[]                       @relation("goalsTogoals")
  key_result_weight_snapshots key_result_weight_snapshots[]
  key_results                 key_results[]

  @@index([account_uuid, folder_uuid])
  @@index([account_uuid])
  @@index([account_uuid, status])
  @@index([created_at])
  @@index([folder_uuid])
  @@index([parent_goal_uuid])
  @@index([status])
  @@index([target_date])
}

model key_result_weight_snapshots {
  uuid            String      @id
  goal_uuid       String
  key_result_uuid String
  old_weight      Float
  new_weight      Float
  weight_delta    Float
  snapshot_time   BigInt
  trigger         String
  reason          String?
  operator_uuid   String
  created_at      DateTime    @default(now())
  goals           goals       @relation(fields: [goal_uuid], references: [uuid], onDelete: Cascade)
  key_results     key_results @relation(fields: [key_result_uuid], references: [uuid], onDelete: Cascade)

  @@index([goal_uuid])
  @@index([goal_uuid, snapshot_time])
  @@index([key_result_uuid])
  @@index([snapshot_time])
}

model key_results {
  uuid                        String                        @id
  goal_uuid                   String
  title                       String
  description                 String?
  value_type                  String
  aggregation_method          String
  target_value                Float
  current_value               Float                         @default(0)
  unit                        String?
  weight                      Float                         @default(1)
  order                       Int                           @default(0)
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime
  goal_records                goal_records[]
  key_result_weight_snapshots key_result_weight_snapshots[]
  goals                       goals                         @relation(fields: [goal_uuid], references: [uuid], onDelete: Cascade)

  @@index([goal_uuid, created_at])
  @@index([goal_uuid])
}

model linked_contents {
  uuid                 String               @id
  resource_uuid        String
  title                String
  url                  String
  content_type         String
  description          String?
  thumbnail            String?
  author               String?
  published_at         DateTime?
  is_accessible        Boolean              @default(true)
  last_checked_at      DateTime?
  cached_at            DateTime?
  created_at           DateTime             @default(now())
  updated_at           DateTime
  repository_resources repository_resources @relation(fields: [resource_uuid], references: [uuid], onDelete: Cascade)

  @@index([content_type])
  @@index([resource_uuid])
  @@index([url])
}

model notification_channels {
  uuid              String        @id
  notification_uuid String
  channel_type      String
  status            String
  recipient         String?
  max_retries       Int           @default(3)
  error             String?
  response          String?
  retry_count       Int           @default(0)
  notifications     notifications @relation(fields: [notification_uuid], references: [uuid], onDelete: Cascade)

  @@index([notification_uuid])
}

model notification_history {
  uuid              String        @id
  notification_uuid String
  action            String
  details           String?
  actor_uuid        String?
  created_at        DateTime      @default(now())
  notifications     notifications @relation(fields: [notification_uuid], references: [uuid], onDelete: Cascade)

  @@index([notification_uuid])
}

model notification_preferences {
  uuid           String   @id
  account_uuid   String   @unique
  enabled        Boolean  @default(true)
  channels       String
  categories     String
  do_not_disturb String?
  rate_limit     String?
  created_at     DateTime @default(now())
  updated_at     DateTime

  @@index([account_uuid])
}

model notification_templates {
  uuid             String   @id
  name             String   @unique
  display_name     String
  description      String?
  type             String
  category         String
  title_template   String
  content_template String
  variables        String?
  default_actions  String?
  is_system        Boolean  @default(false)
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime

  @@index([name])
}

model notifications {
  uuid                  String                  @id
  account_uuid          String
  type                  String
  category              String
  status                String
  title                 String
  content               String
  importance            String
  urgency               String
  related_entity_type   String?
  related_entity_uuid   String?
  metadata              String?
  actions               String?
  read_at               DateTime?
  sent_at               DateTime?
  expires_at            DateTime?
  created_at            DateTime                @default(now())
  updated_at            DateTime
  deleted_at            DateTime?
  is_read               Boolean                 @default(false)
  notification_channels notification_channels[]
  notification_history  notification_history[]

  @@index([account_uuid])
  @@index([category])
  @@index([status])
}

model reminder_groups {
  uuid               String               @id
  account_uuid       String
  name               String
  description        String?
  color              String?
  icon               String?
  control_mode       String
  enabled            Boolean
  status             String
  order              Int
  stats              String
  created_at         DateTime             @default(now())
  updated_at         DateTime
  deleted_at         DateTime?
  accounts           accounts             @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  reminder_templates reminder_templates[]

  @@index([account_uuid])
}

model reminder_history {
  uuid                  String             @id
  template_uuid         String
  triggered_at          DateTime
  result                String
  error                 String?
  notification_sent     Boolean
  notification_channels String?
  created_at            DateTime           @default(now())
  reminder_templates    reminder_templates @relation(fields: [template_uuid], references: [uuid], onDelete: Cascade)

  @@index([template_uuid])
}

model reminder_instances {
  uuid               String             @id
  template_uuid      String
  account_uuid       String
  trigger_at         DateTime
  status             String
  result             String?
  processed_at       DateTime?
  note               String?
  payload            String?
  created_at         DateTime           @default(now())
  updated_at         DateTime
  accounts           accounts           @relation(fields: [account_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  reminder_templates reminder_templates @relation(fields: [template_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([status])
  @@index([template_uuid])
  @@index([trigger_at])
}

model reminder_statistics {
  uuid           String   @id
  account_uuid   String   @unique
  template_stats String
  group_stats    String
  trigger_stats  String
  calculated_at  DateTime
  accounts       accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
}

model reminder_templates {
  uuid                String               @id
  account_uuid        String
  title               String
  description         String?
  type                String
  self_enabled        Boolean
  status              String
  group_uuid          String?
  importance_level    String
  tags                String
  color               String?
  icon                String?
  next_trigger_at     DateTime?
  created_at          DateTime             @default(now())
  updated_at          DateTime
  deleted_at          DateTime?
  trigger             String
  recurrence          String?
  active_time         String
  active_hours        String?
  notification_config String
  stats               String
  reminder_history    reminder_history[]
  reminder_instances  reminder_instances[]
  accounts            accounts             @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  reminder_groups     reminder_groups?     @relation(fields: [group_uuid], references: [uuid])

  @@index([account_uuid])
  @@index([group_uuid])
  @@index([next_trigger_at])
  @@index([status])
}

model repositories {
  uuid                 String                 @id
  account_uuid         String
  name                 String
  type                 String
  path                 String
  description          String?
  config               String
  related_goals        String?
  status               String                 @default("active")
  git                  String?
  sync_status          String?
  stats                String
  last_accessed_at     DateTime?
  created_at           DateTime               @default(now())
  updated_at           DateTime
  accounts             accounts               @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  repository_explorers repository_explorers[]
  repository_resources repository_resources[]

  @@unique([account_uuid, path])
  @@index([account_uuid])
  @@index([created_at])
  @@index([last_accessed_at])
  @@index([path])
  @@index([status])
  @@index([type])
}

model repository_explorers {
  uuid            String       @id
  repository_uuid String
  account_uuid    String
  name            String
  description     String?
  current_path    String
  filters         String?
  view_config     String?
  pinned_paths    String?
  recent_paths    String?
  last_scan_at    DateTime?
  created_at      DateTime     @default(now())
  updated_at      DateTime
  accounts        accounts     @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  repositories    repositories @relation(fields: [repository_uuid], references: [uuid], onDelete: Cascade)

  @@unique([repository_uuid, account_uuid])
  @@index([account_uuid])
  @@index([repository_uuid])
}

model repository_resources {
  uuid                                                                               String                @id
  repository_uuid                                                                    String
  name                                                                               String
  type                                                                               String
  path                                                                               String
  size                                                                               Int?
  description                                                                        String?
  author                                                                             String?
  version                                                                            String?
  tags                                                                               String?
  category                                                                           String?
  status                                                                             String                @default("active")
  metadata                                                                           String?
  created_at                                                                         DateTime              @default(now())
  updated_at                                                                         DateTime
  modified_at                                                                        DateTime?
  linked_contents                                                                    linked_contents[]
  repositories                                                                       repositories          @relation(fields: [repository_uuid], references: [uuid], onDelete: Cascade)
  resource_references_resource_references_source_resource_uuidTorepository_resources resource_references[] @relation("resource_references_source_resource_uuidTorepository_resources")
  resource_references_resource_references_target_resource_uuidTorepository_resources resource_references[] @relation("resource_references_target_resource_uuidTorepository_resources")

  @@unique([repository_uuid, path])
  @@index([created_at])
  @@index([path])
  @@index([repository_uuid])
  @@index([status])
  @@index([type])
}

model repository_statistics {
  id                    Int      @id @default(autoincrement())
  account_uuid          String   @unique
  total_repositories    Int      @default(0)
  active_repositories   Int      @default(0)
  archived_repositories Int      @default(0)
  total_resources       Int      @default(0)
  total_files           Int      @default(0)
  total_folders         Int      @default(0)
  git_enabled_repos     Int      @default(0)
  total_commits         Int      @default(0)
  total_references      Int      @default(0)
  total_linked_contents Int      @default(0)
  total_size_bytes      BigInt   @default(0)
  last_updated_at       DateTime @default(now())
  created_at            DateTime @default(now())
  accounts              accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
}

model resource_references {
  uuid                                                                                String               @id
  source_resource_uuid                                                                String
  target_resource_uuid                                                                String
  reference_type                                                                      String
  description                                                                         String?
  created_at                                                                          DateTime             @default(now())
  updated_at                                                                          DateTime
  last_verified_at                                                                    DateTime?
  repository_resources_resource_references_source_resource_uuidTorepository_resources repository_resources @relation("resource_references_source_resource_uuidTorepository_resources", fields: [source_resource_uuid], references: [uuid], onDelete: Cascade)
  repository_resources_resource_references_target_resource_uuidTorepository_resources repository_resources @relation("resource_references_target_resource_uuidTorepository_resources", fields: [target_resource_uuid], references: [uuid], onDelete: Cascade)

  @@unique([source_resource_uuid, target_resource_uuid, reference_type])
  @@index([reference_type])
  @@index([source_resource_uuid])
  @@index([target_resource_uuid])
}

model schedule_executions {
  uuid           String         @id
  task_uuid      String
  execution_time DateTime
  status         String
  duration       Int?
  result         String?
  error          String?
  retry_count    Int            @default(0)
  created_at     DateTime       @default(now())
  schedule_tasks schedule_tasks @relation(fields: [task_uuid], references: [uuid], onDelete: Cascade)

  @@index([execution_time])
  @@index([status])
  @@index([task_uuid])
}

model schedule_statistics {
  id                     Int      @id @default(autoincrement())
  account_uuid           String   @unique
  total_tasks            Int
  active_tasks           Int
  paused_tasks           Int
  completed_tasks        Int
  cancelled_tasks        Int
  failed_tasks           Int
  total_executions       Int
  successful_executions  Int
  failed_executions      Int
  skipped_executions     Int
  timeout_executions     Int
  avg_execution_duration Float
  min_execution_duration Float
  max_execution_duration Float
  module_statistics      String   @default("{}")
  last_updated_at        DateTime
  created_at             DateTime @default(now())
  accounts               accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
}

model schedule_tasks {
  uuid                    String                @id
  account_uuid            String
  name                    String
  description             String?
  source_module           String
  source_entity_id        String
  status                  String
  enabled                 Boolean
  cron_expression         String?
  timezone                String
  start_date              DateTime?
  end_date                DateTime?
  max_executions          Int?
  next_run_at             DateTime?
  last_run_at             DateTime?
  execution_count         Int                   @default(0)
  last_execution_status   String?
  last_execution_duration Int?
  consecutive_failures    Int                   @default(0)
  max_retries             Int
  initial_delay_ms        Int
  max_delay_ms            Int
  backoff_multiplier      Float
  retryable_statuses      String                @default("[]")
  payload                 String?
  tags                    String                @default("[]")
  priority                String
  timeout                 Int
  created_at              DateTime              @default(now())
  updated_at              DateTime
  schedule_executions     schedule_executions[]
  accounts                accounts              @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([enabled])
  @@index([next_run_at])
  @@index([source_entity_id])
  @@index([source_module])
  @@index([status])
}

model schedules {
  uuid                  String   @id
  account_uuid          String
  title                 String
  description           String?
  start_time            BigInt
  end_time              BigInt
  duration              Int
  has_conflict          Boolean  @default(false)
  conflicting_schedules String?
  priority              Int?
  location              String?
  attendees             String?
  created_at            DateTime @default(now())
  updated_at            DateTime
  accounts              accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([account_uuid, start_time, end_time])
  @@index([start_time, end_time])
}

model setting_groups {
  uuid                 String           @id
  key                  String           @unique
  name                 String
  description          String?
  parent_uuid          String?
  order                Int              @default(0)
  icon                 String?
  is_collapsed         Boolean          @default(false)
  created_at           DateTime         @default(now())
  updated_at           DateTime
  setting_groups       setting_groups?  @relation("setting_groupsTosetting_groups", fields: [parent_uuid], references: [uuid], onDelete: Cascade)
  other_setting_groups setting_groups[] @relation("setting_groupsTosetting_groups")
  setting_items        setting_items[]
  settings             settings[]

  @@index([order])
  @@index([parent_uuid])
}

model setting_items {
  uuid           String         @id
  group_uuid     String
  setting_key    String
  order          Int            @default(0)
  is_visible     Boolean        @default(true)
  custom_label   String?
  created_at     DateTime       @default(now())
  updated_at     DateTime
  setting_groups setting_groups @relation(fields: [group_uuid], references: [uuid], onDelete: Cascade)

  @@unique([group_uuid, setting_key])
  @@index([group_uuid])
  @@index([order])
  @@index([setting_key])
}

model settings {
  uuid              String          @id
  key               String
  name              String
  description       String?
  value_type        String
  value             String
  default_value     String
  scope             String
  account_uuid      String?
  device_id         String?
  group_uuid        String?
  validation        String?
  ui                String?
  is_encrypted      Boolean         @default(false)
  is_read_only      Boolean         @default(false)
  is_system_setting Boolean         @default(false)
  sync_config       String?
  history_data      String          @default("[]")
  created_at        DateTime        @default(now())
  updated_at        DateTime
  deleted_at        DateTime?
  accounts          accounts?       @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  setting_groups    setting_groups? @relation(fields: [group_uuid], references: [uuid])

  @@unique([key, scope, account_uuid, device_id])
  @@index([account_uuid])
  @@index([created_at])
  @@index([device_id])
  @@index([group_uuid])
  @@index([is_system_setting])
  @@index([key])
  @@index([scope])
}

model task_dependencies {
  uuid                                                                   String         @id
  predecessor_task_uuid                                                  String
  successor_task_uuid                                                    String
  dependency_type                                                        String         @default("FINISH_TO_START")
  lag_days                                                               Int?
  created_at                                                             DateTime       @default(now())
  updated_at                                                             DateTime
  task_templates_task_dependencies_predecessor_task_uuidTotask_templates task_templates @relation("task_dependencies_predecessor_task_uuidTotask_templates", fields: [predecessor_task_uuid], references: [uuid], onDelete: Cascade)
  task_templates_task_dependencies_successor_task_uuidTotask_templates   task_templates @relation("task_dependencies_successor_task_uuidTotask_templates", fields: [successor_task_uuid], references: [uuid], onDelete: Cascade)

  @@unique([predecessor_task_uuid, successor_task_uuid])
  @@index([predecessor_task_uuid])
  @@index([successor_task_uuid])
}

model task_instances {
  uuid              String         @id
  template_uuid     String
  account_uuid      String
  instance_date     DateTime
  status            String
  note              String?
  actual_start_time DateTime?
  actual_end_time   DateTime?
  created_at        DateTime       @default(now())
  updated_at        DateTime
  time_config       String
  completion_record String?
  skip_record       String?
  accounts          accounts       @relation(fields: [account_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  task_templates    task_templates @relation(fields: [template_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
  @@index([account_uuid, instance_date])
  @@index([account_uuid, status])
  @@index([instance_date])
  @@index([status])
  @@index([template_uuid])
  @@index([template_uuid, instance_date])
}

model task_statistics {
  uuid                       String   @id
  account_uuid               String   @unique
  calculated_at              DateTime
  template_total             Int
  template_active            Int
  template_paused            Int
  template_archived          Int
  template_one_time          Int
  template_recurring         Int
  instance_total             Int
  instance_today             Int
  instance_week              Int
  instance_month             Int
  instance_pending           Int
  instance_in_progress       Int
  instance_completed         Int
  instance_skipped           Int
  instance_expired           Int
  completion_today           Int
  completion_week            Int
  completion_month           Int
  completion_total           Int
  completion_avg_time        Float?
  completion_rate            Float
  time_all_day               Int
  time_point                 Int
  time_range                 Int
  time_overdue               Int
  time_upcoming              Int
  distribution_by_importance String
  distribution_by_urgency    String
  distribution_by_folder     String
  distribution_by_tag        String
  accounts                   accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
}

model task_template_history {
  uuid           String         @id
  template_uuid  String
  action         String
  changes        String?
  created_at     DateTime       @default(now())
  task_templates task_templates @relation(fields: [template_uuid], references: [uuid], onDelete: Cascade)

  @@index([template_uuid])
}

model task_templates {
  uuid                                                                      String                  @id
  account_uuid                                                              String
  title                                                                     String
  description                                                               String?
  task_type                                                                 String
  status                                                                    String
  importance                                                                String
  urgency                                                                   String
  color                                                                     String?
  tags                                                                      String
  folder_uuid                                                               String?
  last_generated_date                                                       DateTime?
  generate_ahead_days                                                       Int
  created_at                                                                DateTime                @default(now())
  updated_at                                                                DateTime
  deleted_at                                                                DateTime?
  time_config_type                                                          String
  time_config_start_time                                                    DateTime?
  time_config_end_time                                                      DateTime?
  time_config_duration_minutes                                              Int?
  recurrence_rule_type                                                      String?
  recurrence_rule_interval                                                  Int?
  recurrence_rule_days_of_week                                              String?
  recurrence_rule_day_of_month                                              Int?
  recurrence_rule_month_of_year                                             Int?
  recurrence_rule_end_date                                                  DateTime?
  recurrence_rule_count                                                     Int?
  reminder_config_enabled                                                   Boolean?
  reminder_config_time_offset_minutes                                       Int?
  reminder_config_unit                                                      String?
  reminder_config_channel                                                   String?
  goal_binding_goal_uuid                                                    String?
  goal_binding_key_result_uuid                                              String?
  goal_binding_increment_value                                              Float?
  blocking_reason                                                           String?
  dependency_status                                                         String                  @default("NONE")
  is_blocked                                                                Boolean                 @default(false)
  task_dependencies_task_dependencies_predecessor_task_uuidTotask_templates task_dependencies[]     @relation("task_dependencies_predecessor_task_uuidTotask_templates")
  task_dependencies_task_dependencies_successor_task_uuidTotask_templates   task_dependencies[]     @relation("task_dependencies_successor_task_uuidTotask_templates")
  task_instances                                                            task_instances[]
  task_template_history                                                     task_template_history[]
  accounts                                                                  accounts                @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid, deleted_at])
  @@index([account_uuid])
  @@index([account_uuid, status])
  @@index([account_uuid, task_type])
  @@index([status])
  @@index([task_type])
}

model user_settings {
  uuid                           String   @id
  account_uuid                   String   @unique
  created_at                     DateTime @default(now())
  updated_at                     DateTime
  appearance_accent_color        String   @default("#3B82F6")
  appearance_compact_mode        Boolean  @default(false)
  appearance_font_family         String?
  appearance_font_size           String   @default("MEDIUM")
  appearance_theme               String   @default("AUTO")
  experimental_enabled           Boolean  @default(false)
  experimental_features          String   @default("[]")
  locale_currency                String   @default("CNY")
  locale_date_format             String   @default("YYYY-MM-DD")
  locale_language                String   @default("zh-CN")
  locale_time_format             String   @default("24H")
  locale_timezone                String   @default("Asia/Shanghai")
  locale_week_starts_on          Int      @default(1)
  privacy_allow_search_by_email  Boolean  @default(true)
  privacy_allow_search_by_phone  Boolean  @default(false)
  privacy_profile_visibility     String   @default("PRIVATE")
  privacy_share_usage_data       Boolean  @default(false)
  privacy_show_online_status     Boolean  @default(true)
  shortcuts_custom               String   @default("{}")
  shortcuts_enabled              Boolean  @default(true)
  workflow_auto_save             Boolean  @default(true)
  workflow_auto_save_interval    Int      @default(30000)
  workflow_confirm_before_delete Boolean  @default(true)
  workflow_default_goal_view     String   @default("LIST")
  workflow_default_schedule_view String   @default("WEEK")
  workflow_default_task_view     String   @default("LIST")
  accounts                       accounts @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)

  @@index([account_uuid])
}
