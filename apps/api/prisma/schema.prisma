// Prisma schema for DailyUse - DDD Architecture
// Based on electron modules database structure
// Switch provider to postgresql if you plan to use PostgreSQL
// and set DATABASE_URL in apps/api/.env

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account aggregate root
model Account {
  uuid                   String    @id @default(cuid())
  username               String    @unique
  email                  String?   @unique
  phone                  String?   @unique
  accountType            String    @default("local") @map("account_type") // 'local', 'online'
  status                 String    @default("active") // 'active', 'disabled', 'suspended', 'pending_verification'
  roleIds                String    @default("[]") @map("role_ids") // JSON array
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  lastLoginAt            DateTime? @map("last_login_at")
  emailVerificationToken String?   @map("email_verification_token")
  phoneVerificationCode  String?   @map("phone_verification_code")
  emailVerified          Boolean   @default(false) @map("email_verified")
  phoneVerified          Boolean   @default(false) @map("phone_verified")

  // Relations
  userProfile     UserProfile?
  authCredentials AuthCredential[]
  sessions        UserSession[]
  mfaDevices      MFADevice[]
  tokens          AuthToken[]
  repositories    Repository[]
  goalDirs        GoalDir[]
  goalCategories  GoalCategory[]
  keyResults      KeyResult[]
  goalRecords     GoalRecord[]
  tasks           Task[]

  @@map("accounts")
}

// User profile entity
model UserProfile {
  uuid           String    @id @default(cuid())
  accountUuid    String    @unique @map("account_uuid")
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  displayName    String?   @map("display_name")
  sex            Int       @map("sex") // '0' = female, '1' = male, '2' = other
  dateOfBirth    DateTime? @map("date_of_birth")
  avatarUrl      String?   @map("avatar_url")
  bio            String?
  location       String?
  website        String?
  socialAccounts String?   @map("social_accounts") // JSON object
  preferences    String? // JSON object
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("user_profiles")
}

// Authentication credentials
model AuthCredential {
  uuid              String    @id @default(cuid())
  accountUuid       String    @map("account_uuid")
  passwordHash      String    @map("password_hash")
  passwordSalt      String    @map("password_salt")
  passwordAlgorithm String    @map("password_algorithm")
  passwordCreatedAt DateTime  @map("password_created_at")
  passwordExpiresAt DateTime? @map("password_expires_at")
  isLocked          Boolean   @default(false) @map("is_locked")
  lockReason        String?   @map("lock_reason")
  failedAttempts    Int       @default(0) @map("failed_attempts")
  lastFailedAt      DateTime? @map("last_failed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([accountUuid])
  @@map("auth_credentials")
}

// User sessions
model UserSession {
  uuid           String    @id @default(cuid())
  accountUuid    String    @map("account_uuid")
  sessionId      String    @unique @map("session_id")
  accessToken    String    @map("access_token")
  refreshToken   String?   @map("refresh_token")
  deviceInfo     String?   @map("device_info") // JSON
  ipAddress      String?   @map("ip_address")
  userAgent      String?   @map("user_agent")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  lastAccessedAt DateTime? @map("last_accessed_at")
  expiresAt      DateTime  @map("expires_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("user_sessions")
}

// MFA Devices
model MFADevice {
  uuid                 String    @id @default(cuid())
  accountUuid          String    @map("account_uuid")
  type                 String // 'totp', 'sms', 'email'
  name                 String
  secretKey            String?   @map("secret_key")
  phoneNumber          String?   @map("phone_number")
  emailAddress         String?   @map("email_address")
  backupCodes          String?   @map("backup_codes") // JSON
  isVerified           Boolean   @default(false) @map("is_verified")
  isEnabled            Boolean   @default(false) @map("is_enabled")
  verificationAttempts Int       @default(0) @map("verification_attempts")
  maxAttempts          Int       @default(5) @map("max_attempts")
  createdAt            DateTime  @default(now()) @map("created_at")
  lastUsedAt           DateTime? @map("last_used_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("mfa_devices")
}

// Auth tokens (for various token types)
model AuthToken {
  uuid         String   @id @default(cuid())
  accountUuid  String   @map("account_uuid")
  tokenValue   String   @unique @map("token_value")
  tokenType    String   @map("token_type") // 'access', 'refresh', 'remember_me', 'email_verification'
  issuedAt     DateTime @default(now()) @map("issued_at")
  expiresAt    DateTime @map("expires_at")
  isRevoked    Boolean  @default(false) @map("is_revoked")
  revokeReason String?  @map("revoke_reason")
  metadata     String? // JSON

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([tokenType])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("auth_tokens")
}

// Repository aggregate
model Repository {
  uuid         String   @id @default(cuid())
  accountUuid  String   @map("account_uuid")
  name         String
  path         String
  description  String?
  relatedGoals String?  @map("related_goals") // JSON array
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("repositories")
}

// Goal aggregate
model Goal {
  uuid    String  @id @default(cuid())
  dirUuid String? @map("dir_uuid")

  // 基本信息
  name        String
  description String?
  color       String

  // 时间信息
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  note      String?

  // 分析信息 (JSON存储)
  analysis String @default("{}") // 包含 motive, feasibility, importanceLevel, urgencyLevel

  // 生命周期 (JSON存储)
  lifecycle String @default("{}") // 包含 createdAt, updatedAt, status

  // 元数据 (JSON存储)
  metadata String @default("{}") // 包含 tags, category

  // 版本控制
  version Int @default(1)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  directory           GoalDir?           @relation(fields: [dirUuid], references: [uuid], onDelete: SetNull)
  keyResults          KeyResult[]
  records             GoalRecord[]
  reviews             GoalReview[]
  tasks               Task[]
  sourceRelationships GoalRelationship[] @relation("SourceGoal")
  targetRelationships GoalRelationship[] @relation("TargetGoal")

  @@index([dirUuid])
  @@index([startTime])
  @@index([endTime])
  @@index([createdAt])
  @@map("goals")
}

// Goal Directory
model GoalDir {
  uuid        String  @id @default(cuid())
  accountUuid String  @map("account_uuid")
  parentUuid  String? @map("parent_uuid")

  name        String
  description String?
  icon        String
  color       String

  // 排序配置 (JSON存储)
  sortConfig String @default("{}") @map("sort_config") // 包含 sortKey, sortOrder

  // 生命周期 (JSON存储)
  lifecycle String @default("{}") // 包含 createdAt, updatedAt, status

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  account  Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  parent   GoalDir?  @relation("GoalDirHierarchy", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children GoalDir[] @relation("GoalDirHierarchy")
  goals    Goal[]

  @@index([accountUuid])
  @@index([parentUuid])
  @@map("goal_directories")
}

// Goal Category
model GoalCategory {
  uuid        String  @id @default(cuid())
  accountUuid String  @map("account_uuid")
  parentUuid  String? @map("parent_uuid")

  name        String
  description String?
  icon        String?
  color       String?

  sortOrder Int     @default(0) @map("sort_order")
  isSystem  Boolean @default(false) @map("is_system")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  account  Account        @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  parent   GoalCategory?  @relation("GoalCategoryHierarchy", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children GoalCategory[] @relation("GoalCategoryHierarchy")

  @@index([accountUuid])
  @@index([parentUuid])
  @@index([sortOrder])
  @@index([isSystem])
  @@map("goal_categories")
}

// Key Result (OKR)
model KeyResult {
  uuid        String @id @default(cuid())
  accountUuid String @map("account_uuid")
  goalUuid    String @map("goal_uuid")

  // 基本信息
  name        String
  description String?

  // 数值信息
  startValue        Float  @default(0) @map("start_value")
  targetValue       Float  @map("target_value")
  currentValue      Float  @default(0) @map("current_value")
  unit              String
  weight            Float  @default(1.0)
  calculationMethod String @default("sum") @map("calculation_method") // 'sum', 'average', 'max', 'min', 'custom'

  // 生命周期 (JSON存储)
  lifecycle String @default("{}") // 包含 createdAt, updatedAt, status

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  account Account      @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goal    Goal         @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)
  records GoalRecord[]

  @@index([accountUuid])
  @@index([goalUuid])
  @@index([weight])
  @@index([createdAt])
  @@map("key_results")
}

// Goal Record
model GoalRecord {
  uuid          String @id @default(cuid())
  accountUuid   String @map("account_uuid")
  goalUuid      String @map("goal_uuid")
  keyResultUuid String @map("key_result_uuid")

  value Float
  note  String?

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  account   Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goal      Goal      @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)
  keyResult KeyResult @relation(fields: [keyResultUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([goalUuid])
  @@index([keyResultUuid])
  @@index([createdAt])
  @@map("goal_records")
}

// Goal Review
model GoalReview {
  uuid       String   @id @default(cuid())
  goalUuid   String   @map("goal_uuid")
  title      String
  type       String   @default("weekly") // 'weekly', 'monthly', 'midterm', 'final', 'custom'
  reviewDate DateTime @map("review_date")

  // 复盘内容 (JSON存储)
  content String @default("{}") // 包含 achievements, challenges, learnings, nextSteps, adjustments

  // 快照数据 (JSON存储)
  snapshot String @default("{}") // 包含进度快照信息

  // 评分 (JSON存储)
  rating String @default("{}") // 包含各种评分

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  goal Goal @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)

  @@index([goalUuid])
  @@index([type])
  @@index([reviewDate])
  @@index([createdAt])
  @@map("goal_reviews")
}

// Goal Relationships
model GoalRelationship {
  uuid           String @id @default(cuid())
  sourceGoalUuid String @map("source_goal_uuid")
  targetGoalUuid String @map("target_goal_uuid")

  relationshipType String  @map("relationship_type") // 'depends_on', 'supports', 'conflicts_with', 'similar_to', 'parent_of', 'child_of'
  strength         Float   @default(1.0) // 0.0-1.0
  description      String?
  isActive         Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  sourceGoal Goal @relation("SourceGoal", fields: [sourceGoalUuid], references: [uuid], onDelete: Cascade)
  targetGoal Goal @relation("TargetGoal", fields: [targetGoalUuid], references: [uuid], onDelete: Cascade)

  @@unique([sourceGoalUuid, targetGoalUuid, relationshipType])
  @@index([sourceGoalUuid])
  @@index([targetGoalUuid])
  @@index([relationshipType])
  @@map("goal_relationships")
}

// Task aggregate
model Task {
  uuid        String    @id @default(cuid())
  accountUuid String    @map("account_uuid")
  goalUuid    String?   @map("goal_uuid")
  title       String
  description String?
  status      String    @default("pending") // 'pending', 'in_progress', 'completed', 'cancelled'
  priority    String    @default("medium") // 'low', 'medium', 'high'
  dueDate     DateTime? @map("due_date")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goal    Goal?   @relation(fields: [goalUuid], references: [uuid], onDelete: SetNull)

  @@map("tasks")
}
