generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  uuid                   String                  @id @default(cuid())
  username               String                  @unique
  email                  String?                 @unique
  phone                  String?                 @unique
  accountType            String                  @default("local") @map("account_type")
  status                 String                  @default("active")
  roleIds                String                  @default("[]") @map("role_ids")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  lastLoginAt            DateTime?               @map("last_login_at")
  emailVerificationToken String?                 @map("email_verification_token")
  phoneVerificationCode  String?                 @map("phone_verification_code")
  emailVerified          Boolean                 @default(false) @map("email_verified")
  phoneVerified          Boolean                 @default(false) @map("phone_verified")
  authCredentials        AuthCredential?
  tokens                 AuthToken[]
  editorFileContents     EditorFileContent[]
  editorGroups           EditorGroup[]
  editorSessions         EditorSession[]
  editorTabs             EditorTab[]
  editorWorkspaces                 EditorWorkspace[]
  editorWorkspaceSessions          EditorWorkspaceSession[]
  editorWorkspaceSessionGroups     EditorWorkspaceSessionGroup[]
  editorWorkspaceSessionGroupTabs  EditorWorkspaceSessionGroupTab[]
  goalCategories         GoalCategory[]
  goalDirs               GoalDir[]
  goals                  Goal[]
  mfaDevices             MFADevice[]
  reminderTemplateGroups ReminderTemplateGroup[]
  reminderTemplates      ReminderTemplate[]
  repositories           Repository[]
  repositoryStatistics   RepositoryStatistics?
  repositoryExplorers    RepositoryExplorer[]
  settingBackups         SettingBackup[]
  settingChangeRecords   SettingChangeRecord[]
  settingDefinitions     SettingDefinition[]
  settingGroups          SettingGroup[]
  settingValues          SettingValue[]
  taskInstances          TaskInstance[]
  taskMetaTemplates      TaskMetaTemplate[]
  taskTemplates          TaskTemplate[]
  userProfile            UserProfile?
  sessions               UserSession[]
  oldScheduleTasks       OldScheduleTask[]
  scheduleExecutions     ScheduleExecution[]
  notifications          Notification[]
  notificationPreference NotificationPreference?

  @@map("accounts")
}

model UserProfile {
  bio            String?
  accountUuid    String    @unique @map("account_uuid")
  avatarUrl      String?   @map("avatar_url")
  createdAt      DateTime  @default(now()) @map("created_at")
  dateOfBirth    DateTime? @map("date_of_birth")
  displayName    String?   @map("display_name")
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  location       String?
  preferences    String?
  sex            Int       @map("sex")
  socialAccounts String?   @map("social_accounts")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  uuid           String    @id @default(cuid())
  website        String?
  account        Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("user_profiles")
}

model AuthCredential {
  uuid              String    @id @default(cuid())
  accountUuid       String    @unique @map("account_uuid")
  passwordHash      String    @map("password_hash")
  passwordSalt      String    @map("password_salt")
  passwordAlgorithm String    @map("password_algorithm")
  passwordCreatedAt DateTime  @map("password_created_at")
  passwordExpiresAt DateTime? @map("password_expires_at")
  isLocked          Boolean   @default(false) @map("is_locked")
  lockReason        String?   @map("lock_reason")
  failedAttempts    Int       @default(0) @map("failed_attempts")
  lastFailedAt      DateTime? @map("last_failed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  account           Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("auth_credentials")
}

model UserSession {
  uuid           String    @id @default(cuid())
  accountUuid    String    @map("account_uuid")
  sessionId      String    @unique @map("session_id")
  accessToken    String    @map("access_token")
  refreshToken   String?   @map("refresh_token")
  deviceInfo     String?   @map("device_info")
  ipAddress      String?   @map("ip_address")
  userAgent      String?   @map("user_agent")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  lastAccessedAt DateTime? @map("last_accessed_at")
  expiresAt      DateTime  @map("expires_at")
  account        Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("user_sessions")
}

model MFADevice {
  uuid                 String    @id @default(cuid())
  accountUuid          String    @map("account_uuid")
  type                 String
  name                 String
  secretKey            String?   @map("secret_key")
  phoneNumber          String?   @map("phone_number")
  emailAddress         String?   @map("email_address")
  backupCodes          String?   @map("backup_codes")
  isVerified           Boolean   @default(false) @map("is_verified")
  isEnabled            Boolean   @default(false) @map("is_enabled")
  verificationAttempts Int       @default(0) @map("verification_attempts")
  maxAttempts          Int       @default(5) @map("max_attempts")
  createdAt            DateTime  @default(now()) @map("created_at")
  lastUsedAt           DateTime? @map("last_used_at")
  account              Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("mfa_devices")
}

model AuthToken {
  tokenValue   String   @unique @map("token_value")
  tokenType    String   @map("token_type")
  issuedAt     DateTime @default(now()) @map("issued_at")
  expiresAt    DateTime @map("expires_at")
  isRevoked    Boolean  @default(false) @map("is_revoked")
  revokeReason String?  @map("revoke_reason")
  accountUuid  String   @map("account_uuid")
  metadata     String?
  uuid         String   @id @default(cuid())
  account      Account  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([tokenType])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("auth_tokens")
}

model Goal {
  uuid                String             @id @default(cuid())
  description         String?
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  color               String
  endTime             DateTime           @map("end_time")
  name                String
  startTime           DateTime           @map("start_time")
  version             Int                @default(1)
  dirUuid             String?            @map("dir_uuid")
  note                String?
  accountUuid         String             @map("account_uuid")
  category            String             @default("")
  feasibility         String             @default("")
  importanceLevel     String             @default("moderate") @map("importance_level")
  motive              String             @default("")
  status              String             @default("active")
  tags                String             @default("[]")
  urgencyLevel        String             @default("medium") @map("urgency_level")
  sourceRelationships GoalRelationship[] @relation("SourceGoal")
  targetRelationships GoalRelationship[] @relation("TargetGoal")
  reviews             GoalReview[]
  account             Account            @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  directory           GoalDir?           @relation(fields: [dirUuid], references: [uuid])
  keyResults          KeyResult[]

  @@index([accountUuid])
  @@index([dirUuid])
  @@index([startTime])
  @@index([endTime])
  @@index([createdAt])
  @@index([status])
  @@index([importanceLevel])
  @@index([urgencyLevel])
  @@index([category])
  @@map("goals")
}

model GoalDir {
  uuid        String    @id @default(cuid())
  accountUuid String    @map("account_uuid")
  parentUuid  String?   @map("parent_uuid")
  name        String
  description String?
  icon        String
  color       String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  sortKey     String    @default("createdAt") @map("sort_key")
  sortOrder   Int       @default(0) @map("sort_order")
  status      String    @default("active")
  isDefault   Boolean   @default(false) @map("is_default")
  metadata    Json?
  systemType  String?   @map("system_type")
  account     Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  parent      GoalDir?  @relation("GoalDirHierarchy", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children    GoalDir[] @relation("GoalDirHierarchy")
  goals       Goal[]

  @@index([accountUuid])
  @@index([parentUuid])
  @@index([status])
  @@index([sortOrder])
  @@index([systemType])
  @@index([isDefault])
  @@map("goal_directories")
}

model GoalCategory {
  uuid        String         @id @default(cuid())
  accountUuid String         @map("account_uuid")
  parentUuid  String?        @map("parent_uuid")
  name        String
  description String?
  icon        String?
  color       String?
  sortOrder   Int            @default(0) @map("sort_order")
  isSystem    Boolean        @default(false) @map("is_system")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  account     Account        @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  parent      GoalCategory?  @relation("GoalCategoryHierarchy", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children    GoalCategory[] @relation("GoalCategoryHierarchy")

  @@index([accountUuid])
  @@index([parentUuid])
  @@index([sortOrder])
  @@index([isSystem])
  @@map("goal_categories")
}

model KeyResult {
  uuid              String       @id @default(cuid())
  goalUuid          String       @map("goal_uuid")
  name              String
  description       String?
  startValue        Float        @default(0) @map("start_value")
  targetValue       Float        @map("target_value")
  currentValue      Float        @default(0) @map("current_value")
  unit              String
  calculationMethod String       @default("sum") @map("calculation_method")
  weight            Float        @default(1.0)
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  status            String       @default("active")
  records           GoalRecord[]
  goal              Goal         @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)

  @@index([goalUuid])
  @@index([weight])
  @@index([createdAt])
  @@index([status])
  @@map("key_results")
}

model GoalRecord {
  uuid          String    @id @default(cuid())
  keyResultUuid String    @map("key_result_uuid")
  value         Float
  createdAt     DateTime  @default(now()) @map("created_at")
  note          String?
  keyResult     KeyResult @relation(fields: [keyResultUuid], references: [uuid], onDelete: Cascade)

  @@index([keyResultUuid])
  @@index([createdAt])
  @@map("goal_records")
}

model GoalReview {
  uuid       String   @id @default(cuid())
  goalUuid   String   @map("goal_uuid")
  title      String
  reviewDate DateTime @map("review_date")
  snapshot   String   @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  content    String   @default("{}")
  rating     String   @default("{}")
  type       String   @default("weekly")
  goal       Goal     @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)

  @@index([goalUuid])
  @@index([type])
  @@index([reviewDate])
  @@index([createdAt])
  @@map("goal_reviews")
}

model GoalRelationship {
  uuid             String   @id @default(cuid())
  sourceGoalUuid   String   @map("source_goal_uuid")
  targetGoalUuid   String   @map("target_goal_uuid")
  relationshipType String   @map("relationship_type")
  strength         Float    @default(1.0)
  description      String?
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  sourceGoal       Goal     @relation("SourceGoal", fields: [sourceGoalUuid], references: [uuid], onDelete: Cascade)
  targetGoal       Goal     @relation("TargetGoal", fields: [targetGoalUuid], references: [uuid], onDelete: Cascade)

  @@unique([sourceGoalUuid, targetGoalUuid, relationshipType])
  @@index([sourceGoalUuid])
  @@index([targetGoalUuid])
  @@index([relationshipType])
  @@map("goal_relationships")
}

model TaskTemplate {
  uuid                  String         @id @default(cuid())
  accountUuid           String         @map("account_uuid")
  title                 String
  description           String?
  timeType              String         @default("allDay") @map("time_type")
  startTime             String?        @map("start_time")
  endTime               String?        @map("end_time")
  startDate             DateTime       @map("start_date")
  endDate               DateTime?      @map("end_date")
  scheduleMode          String         @default("once") @map("schedule_mode")
  intervalDays          Int?           @map("interval_days")
  weekdays              String         @default("[]")
  monthDays             String         @default("[]") @map("month_days")
  timezone              String         @default("UTC")
  reminderEnabled       Boolean        @default(false) @map("reminder_enabled")
  reminderMinutesBefore Int            @default(15) @map("reminder_minutes_before")
  reminderMethods       String         @default("[]") @map("reminder_methods")
  importance            String         @default("moderate")
  urgency               String         @default("medium")
  location              String?
  tags                  String         @default("[]")
  status                String         @default("draft")
  totalInstances        Int            @default(0) @map("total_instances")
  completedInstances    Int            @default(0) @map("completed_instances")
  completionRate        Float          @default(0.0) @map("completion_rate")
  lastInstanceDate      DateTime?      @map("last_instance_date")
  goalLinks             String         @default("[]") @map("goal_links")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  instances             TaskInstance[]
  account               Account        @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([status])
  @@index([scheduleMode])
  @@index([startDate])
  @@index([endDate])
  @@index([importance])
  @@index([urgency])
  @@map("task_templates")
}

model TaskInstance {
  uuid                  String       @id @default(cuid())
  templateUuid          String       @map("template_uuid")
  accountUuid           String       @map("account_uuid")
  title                 String
  description           String?
  timeType              String       @map("time_type")
  scheduledDate         DateTime     @map("scheduled_date")
  startTime             String?      @map("start_time")
  endTime               String?      @map("end_time")
  estimatedDuration     Int?         @map("estimated_duration")
  timezone              String
  reminderEnabled       Boolean      @default(false) @map("reminder_enabled")
  reminderStatus        String       @default("pending") @map("reminder_status")
  reminderScheduledTime DateTime?    @map("reminder_scheduled_time")
  reminderTriggeredAt   DateTime?    @map("reminder_triggered_at")
  reminderSnoozeCount   Int          @default(0) @map("reminder_snooze_count")
  reminderSnoozeUntil   DateTime?    @map("reminder_snooze_until")
  executionStatus       String       @default("pending") @map("execution_status")
  actualStartTime       DateTime?    @map("actual_start_time")
  actualEndTime         DateTime?    @map("actual_end_time")
  actualDuration        Int?         @map("actual_duration")
  progressPercentage    Int          @default(0) @map("progress_percentage")
  executionNotes        String?      @map("execution_notes")
  importance            String       @default("moderate")
  urgency               String       @default("medium")
  location              String?
  tags                  String       @default("[]")
  lifecycleEvents       String       @default("[]") @map("lifecycle_events")
  goalLinks             String       @default("[]") @map("goal_links")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  account               Account      @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  template              TaskTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([templateUuid])
  @@index([accountUuid])
  @@index([executionStatus])
  @@index([scheduledDate])
  @@index([reminderStatus])
  @@index([importance])
  @@index([urgency])
  @@map("task_instances")
}

model TaskMetaTemplate {
  uuid                         String    @id @default(cuid())
  accountUuid                  String    @map("account_uuid")
  name                         String
  description                  String?
  icon                         String?
  color                        String?
  category                     String
  defaultTimeType              String    @default("allDay") @map("default_time_type")
  defaultScheduleMode          String    @default("once") @map("default_schedule_mode")
  defaultTimezone              String    @default("UTC") @map("default_timezone")
  defaultStartTime             String?   @map("default_start_time")
  defaultEndTime               String?   @map("default_end_time")
  defaultReminderEnabled       Boolean   @default(false) @map("default_reminder_enabled")
  defaultReminderMinutesBefore Int       @default(15) @map("default_reminder_minutes_before")
  defaultReminderMethods       String    @default("[]") @map("default_reminder_methods")
  defaultImportance            String    @default("moderate") @map("default_importance")
  defaultUrgency               String    @default("medium") @map("default_urgency")
  defaultTags                  String    @default("[]") @map("default_tags")
  defaultLocation              String?   @map("default_location")
  usageCount                   Int       @default(0) @map("usage_count")
  lastUsedAt                   DateTime? @map("last_used_at")
  isFavorite                   Boolean   @default(false) @map("is_favorite")
  isActive                     Boolean   @default(true) @map("is_active")
  createdAt                    DateTime  @default(now()) @map("created_at")
  updatedAt                    DateTime  @updatedAt @map("updated_at")
  account                      Account   @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([category])
  @@index([isActive])
  @@index([isFavorite])
  @@index([usageCount])
  @@map("task_meta_templates")
}

model ReminderTemplateGroup {
  uuid        String                  @id @default(cuid())
  accountUuid String                  @map("account_uuid")
  parentUuid  String?                 @map("parent_uuid")
  name        String
  description String?
  enabled     Boolean                 @default(true)
  enableMode  String                  @default("group") @map("enable_mode")
  icon        String?
  color       String?
  sortOrder   Int                     @default(0) @map("sort_order")
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime                @updatedAt @map("updated_at")
  account     Account                 @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  parent      ReminderTemplateGroup?  @relation("GroupHierarchy", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children    ReminderTemplateGroup[] @relation("GroupHierarchy")
  templates   ReminderTemplate[]

  @@index([accountUuid])
  @@index([parentUuid])
  @@index([enabled])
  @@index([sortOrder])
  @@map("reminder_template_groups")
}

model ReminderTemplate {
  uuid                   String                 @id @default(cuid())
  accountUuid            String                 @map("account_uuid")
  groupUuid              String?                @map("group_uuid")
  name                   String
  description            String?
  message                String
  enabled                Boolean                @default(true)
  selfEnabled            Boolean                @default(true) @map("self_enabled")
  importanceLevel        String                 @default("moderate") @map("importance_level")
  priority               String                 @default("normal")
  category               String
  tags                   String                 @default("[]")
  timeConfigType         String                 @default("daily") @map("time_config_type")
  timeConfigTimes        String                 @default("[]") @map("time_config_times")
  timeConfigWeekdays     String                 @default("[]") @map("time_config_weekdays")
  timeConfigMonthDays    String                 @default("[]") @map("time_config_month_days")
  timeConfigDuration     Int?                   @map("time_config_duration")
  timeConfigSchedule     String                 @default("{}") @map("time_config_schedule")
  notificationSound      Boolean                @default(true) @map("notification_sound")
  notificationVibration  Boolean                @default(true) @map("notification_vibration")
  notificationPopup      Boolean                @default(true) @map("notification_popup")
  notificationSoundFile  String?                @map("notification_sound_file")
  notificationCustomIcon String?                @map("notification_custom_icon")
  snoozeEnabled          Boolean                @default(true) @map("snooze_enabled")
  snoozeDefaultMinutes   Int                    @default(10) @map("snooze_default_minutes")
  snoozeMaxCount         Int                    @default(5) @map("snooze_max_count")
  snoozePresetOptions    String                 @default("[]") @map("snooze_preset_options")
  lastTriggered          DateTime?              @map("last_triggered")
  triggerCount           Int                    @default(0) @map("trigger_count")
  totalTriggers          Int                    @default(0) @map("total_triggers")
  acknowledgedCount      Int                    @default(0) @map("acknowledged_count")
  dismissedCount         Int                    @default(0) @map("dismissed_count")
  snoozeCountTotal       Int                    @default(0) @map("snooze_count_total")
  avgResponseTime        Float?                 @map("avg_response_time")
  version                Int                    @default(1)
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  account                Account                @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group                  ReminderTemplateGroup? @relation(fields: [groupUuid], references: [uuid])

  @@index([accountUuid])
  @@index([groupUuid])
  @@index([enabled])
  @@index([category])
  @@index([priority])
  @@index([lastTriggered])
  @@map("reminder_templates")
}

/// RecurringScheduleTask - 可重复的调度任务
/// 支持 cron 表达式和一次性任务，用于替代 ReminderInstance 和 ReminderSchedule
// 统一的调度任务模型
// 使用 Cron 表达式支持单次和重复任务
// - 单次任务: "0 10 15 1 * 2025" (2025年1月15日10:00执行)
// - 重复任务: "0 9 * * 1-5" (工作日每天9:00执行)
model ScheduleTask {
  uuid             String    @id @default(cuid())
  name             String
  description      String?
  cronExpression   String    @map("cron_expression") // Cron 表达式（统一支持单次和重复任务）
  status           String    @default("active") // "active" | "paused" | "completed" | "cancelled"
  enabled          Boolean   @default(true)
  sourceModule     String    @map("source_module") // 来源模块（如 "reminder"）
  sourceEntityId   String    @map("source_entity_id") // 来源实体 ID（如 templateUuid）
  metadata         String    @default("{}") // JSON 元数据
  nextRunAt        DateTime? @map("next_run_at")
  lastRunAt        DateTime? @map("last_run_at")
  executionCount   Int       @default(0) @map("execution_count")
  executionHistory String    @default("[]") @map("execution_history") // JSON 数组，存储最近 10 次执行记录
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@index([sourceModule, sourceEntityId])
  @@index([status])
  @@index([enabled])
  @@index([nextRunAt])
  @@map("schedule_tasks")
}

// 旧模型 - 将被迁移到 ScheduleTask
model RecurringScheduleTask {
  uuid             String    @id @default(cuid())
  name             String
  description      String?
  triggerType      String    @map("trigger_type") // "CRON" | "ONCE"
  cronExpression   String?   @map("cron_expression") // Cron 表达式（仅 CRON 类型）
  scheduledTime    DateTime? @map("scheduled_time") // 预定时间（仅 ONCE 类型）
  status           String    @default("ACTIVE") // "ACTIVE" | "PAUSED" | "COMPLETED" | "CANCELLED"
  enabled          Boolean   @default(true)
  sourceModule     String    @map("source_module") // 来源模块（如 "reminder"）
  sourceEntityId   String    @map("source_entity_id") // 来源实体 ID（如 templateUuid）
  metadata         String    @default("{}") // JSON 元数据
  nextRunAt        DateTime? @map("next_run_at")
  lastRunAt        DateTime? @map("last_run_at")
  executionCount   Int       @default(0) @map("execution_count")
  executionHistory String    @default("[]") @map("execution_history") // JSON 数组，存储最近 10 次执行记录
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@index([sourceModule, sourceEntityId])
  @@index([status])
  @@index([enabled])
  @@index([nextRunAt])
  @@index([triggerType])
  @@map("recurring_schedule_tasks")
}

model SettingDefinition {
  uuid            String                @id @default(cuid())
  accountUuid     String                @map("account_uuid")
  key             String                @unique
  title           String
  description     String?
  type            String                @default("string")
  scope           String                @default("user")
  category        String                @default("general")
  defaultValue    String                @map("default_value")
  currentValue    String?               @map("current_value")
  options         String                @default("[]")
  validationRules String                @default("[]") @map("validation_rules")
  readonly        Boolean               @default(false)
  hidden          Boolean               @default(false)
  requiresRestart Boolean               @default(false) @map("requires_restart")
  sortOrder       Int                   @default(0) @map("sort_order")
  dependsOn       String                @default("[]") @map("depends_on")
  tags            String                @default("[]")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  changes         SettingChangeRecord[]
  account         Account               @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  values          SettingValue[]

  @@index([accountUuid])
  @@index([type])
  @@index([scope])
  @@index([category])
  @@index([sortOrder])
  @@map("setting_definitions")
}

model SettingGroup {
  uuid            String   @id @default(cuid())
  accountUuid     String   @map("account_uuid")
  id              String   @unique
  title           String
  description     String?
  category        String   @default("general")
  icon            String?
  collapsible     Boolean  @default(true)
  defaultExpanded Boolean  @default(true) @map("default_expanded")
  sortOrder       Int      @default(0) @map("sort_order")
  settingKeys     String   @default("[]") @map("setting_keys")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  account         Account  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([category])
  @@index([sortOrder])
  @@map("setting_groups")
}

model SettingValue {
  uuid           String            @id @default(cuid())
  accountUuid    String            @map("account_uuid")
  settingKey     String            @map("setting_key")
  definitionUuid String            @map("definition_uuid")
  value          String
  scope          String            @default("user")
  isDefault      Boolean           @default(false) @map("is_default")
  lastModified   DateTime          @map("last_modified")
  modifiedBy     String?           @map("modified_by")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  account        Account           @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  definition     SettingDefinition @relation(fields: [definitionUuid], references: [uuid], onDelete: Cascade)

  @@unique([accountUuid, settingKey, scope])
  @@index([accountUuid])
  @@index([settingKey])
  @@index([scope])
  @@index([isDefault])
  @@map("setting_values")
}

model SettingChangeRecord {
  uuid           String            @id @default(cuid())
  accountUuid    String            @map("account_uuid")
  settingKey     String            @map("setting_key")
  definitionUuid String            @map("definition_uuid")
  oldValue       String            @map("old_value")
  newValue       String            @map("new_value")
  scope          String            @default("user")
  changedAt      DateTime          @map("changed_at")
  changedBy      String            @map("changed_by")
  reason         String?
  createdAt      DateTime          @default(now()) @map("created_at")
  account        Account           @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  definition     SettingDefinition @relation(fields: [definitionUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([settingKey])
  @@index([scope])
  @@index([changedAt])
  @@map("setting_change_records")
}

model SettingBackup {
  uuid            String   @id @default(cuid())
  accountUuid     String   @map("account_uuid")
  name            String
  description     String?
  settingsData    String   @map("settings_data")
  appVersion      String   @map("app_version")
  settingsVersion String   @map("settings_version")
  createdAt       DateTime @default(now()) @map("created_at")
  account         Account  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([createdAt])
  @@map("setting_backups")
}

model EditorSession {
  uuid              String        @id @default(cuid())
  accountUuid       String        @map("account_uuid")
  name              String
  activeGroupId     String?       @map("active_group_id")
  activityBarWidth  Int           @default(48) @map("activity_bar_width")
  sidebarWidth      Int           @default(300) @map("sidebar_width")
  minSidebarWidth   Int           @default(200) @map("min_sidebar_width")
  resizeHandleWidth Int           @default(4) @map("resize_handle_width")
  minEditorWidth    Int           @default(300) @map("min_editor_width")
  editorTabWidth    Int           @default(120) @map("editor_tab_width")
  windowWidth       Int           @default(1200) @map("window_width")
  windowHeight      Int           @default(800) @map("window_height")
  autoSave          Boolean       @default(true) @map("auto_save")
  autoSaveInterval  Int           @default(30) @map("auto_save_interval")
  lastSavedAt       DateTime?     @map("last_saved_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  groups            EditorGroup[]
  account           Account       @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([activeGroupId])
  @@map("editor_sessions")
}

model EditorGroup {
  uuid         String        @id @default(cuid())
  sessionUuid  String        @map("session_uuid")
  accountUuid  String        @map("account_uuid")
  active       Boolean       @default(false)
  width        Int           @default(400)
  activeTabId  String?       @map("active_tab_id")
  title        String?
  lastAccessed DateTime?     @map("last_accessed")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  account      Account       @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  session      EditorSession @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade)
  tabs         EditorTab[]

  @@index([sessionUuid])
  @@index([accountUuid])
  @@index([active])
  @@map("editor_groups")
}

model EditorTab {
  uuid         String      @id @default(cuid())
  groupUuid    String      @map("group_uuid")
  accountUuid  String      @map("account_uuid")
  title        String
  path         String
  active       Boolean     @default(false)
  isPreview    Boolean     @default(false) @map("is_preview")
  isDirty      Boolean     @default(false) @map("is_dirty")
  fileType     String?     @map("file_type")
  lastModified DateTime?   @map("last_modified")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  account      Account     @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group        EditorGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@index([groupUuid])
  @@index([accountUuid])
  @@index([active])
  @@index([path])
  @@map("editor_tabs")
}

model EditorFileContent {
  uuid         String   @id @default(cuid())
  accountUuid  String   @map("account_uuid")
  path         String   @unique
  content      String
  contentHash  String   @map("content_hash")
  fileSize     Int      @map("file_size")
  encoding     String   @default("utf8")
  isTemporary  Boolean  @default(false) @map("is_temporary")
  isCached     Boolean  @default(false) @map("is_cached")
  lastModified DateTime @map("last_modified")
  lastAccessed DateTime @map("last_accessed")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  account      Account  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([path])
  @@index([isTemporary])
  @@index([lastAccessed])
  @@map("editor_file_contents")
}

// 旧的 ScheduleTask 模型 - 将被废弃
model OldScheduleTask {
  uuid            String    @id @default(cuid())
  accountUuid     String    @map("account_uuid")
  title           String
  description     String?
  taskType        String    @map("task_type")
  status          String    @default("pending")
  priority        String    @default("medium")
  enabled         Boolean   @default(true)
  scheduledTime   DateTime  @map("scheduled_time")
  payload         Json?
  recurrence      Json?
  alertConfig     Json?     @map("alert_config")
  tags            String[]  @default([])
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  lastExecutedAt  DateTime? @map("last_executed_at")
  nextScheduledAt DateTime? @map("next_scheduled_at")
  executionCount  Int       @default(0) @map("execution_count")
  failureCount    Int       @default(0) @map("failure_count")

  // Relations
  account    Account             @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  executions ScheduleExecution[]

  @@index([accountUuid])
  @@index([status])
  @@index([taskType])
  @@index([enabled])
  @@index([scheduledTime])
  @@index([nextScheduledAt])
  @@index([priority])
  @@map("old_schedule_tasks")
}

model ScheduleExecution {
  uuid         String    @id @default(cuid())
  taskUuid     String    @map("task_uuid")
  accountUuid  String    @map("account_uuid")
  status       String    @default("pending")
  startedAt    DateTime? @map("started_at")
  completedAt  DateTime? @map("completed_at")
  duration     Int?      @map("duration_ms")
  result       Json?
  errorMessage String?   @map("error_message")
  retryCount   Int       @default(0) @map("retry_count")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  task    OldScheduleTask @relation(fields: [taskUuid], references: [uuid], onDelete: Cascade)
  account Account         @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([taskUuid])
  @@index([accountUuid])
  @@index([status])
  @@index([startedAt])
  @@index([createdAt])
  @@map("schedule_executions")
}

model UserPreferences {
  uuid                 String   @id @default(cuid())
  accountUuid          String   @unique @map("account_uuid")
  language             String   @default("zh-CN")
  timezone             String   @default("Asia/Shanghai")
  locale               String   @default("zh-CN")
  themeMode            String   @default("system") @map("theme_mode")
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  emailNotifications   Boolean  @default(true) @map("email_notifications")
  pushNotifications    Boolean  @default(true) @map("push_notifications")
  autoLaunch           Boolean  @default(false) @map("auto_launch")
  defaultModule        String   @default("goal") @map("default_module")
  analyticsEnabled     Boolean  @default(true) @map("analytics_enabled")
  crashReportsEnabled  Boolean  @default(true) @map("crash_reports_enabled")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@index([accountUuid])
  @@index([language])
  @@index([themeMode])
  @@map("user_preferences")
}

model UserThemePreference {
  uuid             String   @id @default(cuid())
  accountUuid      String   @unique @map("account_uuid")
  currentThemeUuid String?  @map("current_theme_uuid")
  preferredMode    String   @default("system") @map("preferred_mode")
  autoSwitch       Boolean  @default(false) @map("auto_switch")
  scheduleStart    String?  @map("schedule_start")
  scheduleEnd      String?  @map("schedule_end")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([accountUuid])
  @@index([preferredMode])
  @@map("user_theme_preferences")
}

// ========== Notification Module ==========

model Notification {
  uuid         String    @id @default(cuid())
  accountUuid  String    @map("account_uuid")
  templateUuid String?   @map("template_uuid")
  title        String
  content      String    @db.Text
  type         String
  priority     String
  status       String    @default("pending")
  channels     String    @default("[]") // JSON array
  icon         String?
  image        String?
  actions      String?   @db.Text // JSON array
  scheduledAt  DateTime? @map("scheduled_at")
  sentAt       DateTime? @map("sent_at")
  readAt       DateTime? @map("read_at")
  dismissedAt  DateTime? @map("dismissed_at")
  expiresAt    DateTime? @map("expires_at")
  metadata     String?   @db.Text // JSON
  version      Int       @default(1)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  account          Account               @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  template         NotificationTemplate? @relation(fields: [templateUuid], references: [uuid], onDelete: SetNull)
  deliveryReceipts DeliveryReceipt[]

  @@index([accountUuid])
  @@index([templateUuid])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([scheduledAt])
  @@index([sentAt])
  @@index([createdAt])
  @@index([accountUuid, status])
  @@index([accountUuid, type])
  @@map("notifications")
}

model NotificationTemplate {
  uuid            String   @id @default(cuid())
  name            String   @unique
  type            String
  titleTemplate   String   @map("title_template")
  contentTemplate String   @map("content_template") @db.Text
  icon            String?
  defaultPriority String   @map("default_priority")
  defaultChannels String   @default("[]") @map("default_channels") // JSON array
  defaultActions  String?  @map("default_actions") @db.Text // JSON array
  variables       String   @default("[]") // JSON array
  enabled         Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  notifications Notification[]

  @@index([name])
  @@index([type])
  @@index([enabled])
  @@map("notification_templates")
}

model NotificationPreference {
  uuid               String   @id @default(cuid())
  accountUuid        String   @unique @map("account_uuid")
  enabledTypes       String   @default("[]") @map("enabled_types") // JSON array
  channelPreferences String   @default("{}") @map("channel_preferences") @db.Text // JSON
  maxNotifications   Int      @default(100) @map("max_notifications")
  autoArchiveDays    Int      @default(30) @map("auto_archive_days")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("notification_preferences")
}

model DeliveryReceipt {
  uuid             String    @id @default(cuid())
  notificationUuid String    @map("notification_uuid")
  channel          String
  status           String    @default("pending")
  sentAt           DateTime? @map("sent_at")
  deliveredAt      DateTime? @map("delivered_at")
  failureReason    String?   @map("failure_reason") @db.Text
  retryCount       Int       @default(0) @map("retry_count")
  metadata         String?   @db.Text // JSON

  // Relations
  notification Notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])
  @@index([channel])
  @@index([status])
  @@map("delivery_receipts")
}

// ========== Repository Module ==========

model Repository {
  uuid           String    @id @default(cuid())
  accountUuid    String    @map("account_uuid")
  name           String
  type           String // RepositoryType: 'file', 'git', 'web', 'database', 'api', 'other'
  path           String
  description    String?
  config         String    @db.Text // JSON: RepositoryConfig
  relatedGoals   String?   @map("related_goals") // JSON array of goal UUIDs
  status         String    @default("active") // RepositoryStatus: 'active', 'archived', 'readonly', 'syncing', 'error'
  git            String?   @db.Text // JSON: GitInfo (optional for git repositories)
  syncStatus     String?   @map("sync_status") @db.Text // JSON: SyncStatus (optional)
  stats          String    @db.Text // JSON: RepositoryStats
  lastAccessedAt DateTime? @map("last_accessed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  account   Account              @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  resources RepositoryResource[]
  explorers RepositoryExplorer[]

  @@unique([accountUuid, path])
  @@index([accountUuid])
  @@index([type])
  @@index([status])
  @@index([path])
  @@index([createdAt])
  @@index([lastAccessedAt])
  @@map("repositories")
}

model RepositoryResource {
  uuid           String    @id @default(cuid())
  repositoryUuid String    @map("repository_uuid")
  name           String
  type           String // ResourceType: 'file', 'folder', 'link', 'image', 'video', 'document', 'code', 'data', 'config', 'other'
  path           String
  size           Int? // File size in bytes
  description    String?
  author         String?
  version        String?
  tags           String?   @db.Text // JSON array of tags
  category       String?
  status         String    @default("active") // ResourceStatus: 'active', 'archived', 'deleted', 'broken'
  metadata       String?   @db.Text // JSON: additional metadata
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  modifiedAt     DateTime? @map("modified_at") // File system modification time

  // Relations
  repository       Repository          @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  sourceReferences ResourceReference[] @relation("SourceResource")
  targetReferences ResourceReference[] @relation("TargetResource")
  linkedContents   LinkedContent[]

  @@unique([repositoryUuid, path])
  @@index([repositoryUuid])
  @@index([type])
  @@index([status])
  @@index([path])
  @@index([createdAt])
  @@map("repository_resources")
}

model ResourceReference {
  uuid               String    @id @default(cuid())
  sourceResourceUuid String    @map("source_resource_uuid")
  targetResourceUuid String    @map("target_resource_uuid")
  referenceType      String    @map("reference_type") // ReferenceType: 'import', 'include', 'link', 'dependency', 'related', 'other'
  description        String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  lastVerifiedAt     DateTime? @map("last_verified_at")

  // Relations
  sourceResource RepositoryResource @relation("SourceResource", fields: [sourceResourceUuid], references: [uuid], onDelete: Cascade)
  targetResource RepositoryResource @relation("TargetResource", fields: [targetResourceUuid], references: [uuid], onDelete: Cascade)

  @@unique([sourceResourceUuid, targetResourceUuid, referenceType])
  @@index([sourceResourceUuid])
  @@index([targetResourceUuid])
  @@index([referenceType])
  @@map("resource_references")
}

model LinkedContent {
  uuid          String    @id @default(cuid())
  resourceUuid  String    @map("resource_uuid")
  title         String
  url           String
  contentType   String    @map("content_type") // ContentType: 'article', 'video', 'documentation', 'tutorial', 'reference', 'tool', 'library', 'other'
  description   String?   @db.Text
  thumbnail     String?
  author        String?
  publishedAt   DateTime? @map("published_at")
  isAccessible  Boolean   @default(true) @map("is_accessible")
  lastCheckedAt DateTime? @map("last_checked_at")
  cachedAt      DateTime? @map("cached_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  resource RepositoryResource @relation(fields: [resourceUuid], references: [uuid], onDelete: Cascade)

  @@index([resourceUuid])
  @@index([contentType])
  @@index([url])
  @@map("linked_contents")
}

model RepositoryExplorer {
  uuid           String    @id @default(cuid())
  repositoryUuid String    @map("repository_uuid")
  accountUuid    String    @map("account_uuid")
  name           String
  description    String?
  currentPath    String    @map("current_path")
  filters        String?   @db.Text // JSON: filter configuration
  viewConfig     String?   @map("view_config") @db.Text // JSON: view configuration
  pinnedPaths    String?   @map("pinned_paths") @db.Text // JSON array of pinned paths
  recentPaths    String?   @map("recent_paths") @db.Text // JSON array of recent paths
  lastScanAt     DateTime? @map("last_scan_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  repository Repository @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  account    Account    @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([repositoryUuid, accountUuid])
  @@index([repositoryUuid])
  @@index([accountUuid])
  @@map("repository_explorers")
}

// ============ Repository Statistics (统计数据) ============

model RepositoryStatistics {
  id          Int    @id @default(autoincrement())
  accountUuid String @unique @map("account_uuid")

  // 仓库统计
  totalRepositories    Int @default(0) @map("total_repositories")
  activeRepositories   Int @default(0) @map("active_repositories")
  archivedRepositories Int @default(0) @map("archived_repositories")

  // 资源统计
  totalResources Int @default(0) @map("total_resources")
  totalFiles     Int @default(0) @map("total_files")
  totalFolders   Int @default(0) @map("total_folders")

  // Git 统计
  gitEnabledRepos Int @default(0) @map("git_enabled_repos")
  totalCommits    Int @default(0) @map("total_commits")

  // 引用统计
  totalReferences     Int @default(0) @map("total_references")
  totalLinkedContents Int @default(0) @map("total_linked_contents")

  // 存储统计
  totalSizeBytes BigInt @default(0) @map("total_size_bytes")

  // 时间戳
  lastUpdatedAt DateTime @default(now()) @map("last_updated_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("repository_statistics")
}

// ============================================================
// Editor Module - DDD Design
// 编辑器模块 - DDD 设计
// ============================================================

/// EditorWorkspace 聚合根
/// 代表一个完整的编辑器工作区，包含多个会话
model EditorWorkspace {
  uuid        String   @id @default(cuid())
  accountUuid String   @map("account_uuid")
  name        String
  description String?
  projectPath String   @unique @map("project_path")
  projectType String   @map("project_type")
  layout      Json
  settings    Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  accessedAt  DateTime @default(now()) @map("accessed_at")

  // Relations
  account  Account                 @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  sessions EditorWorkspaceSession[]

  @@index([accountUuid])
  @@index([isActive])
  @@index([accessedAt])
  @@map("editor_workspaces")
}

/// EditorWorkspaceSession - Session 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSession {
  uuid          String   @id @default(cuid())
  workspaceUuid String   @map("workspace_uuid")
  accountUuid   String   @map("account_uuid")
  name          String
  layout        Json
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account   Account                      @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  workspace EditorWorkspace              @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade)
  groups    EditorWorkspaceSessionGroup[]

  @@index([workspaceUuid])
  @@index([accountUuid])
  @@index([isActive])
  @@map("editor_workspace_sessions")
}

/// EditorWorkspaceSessionGroup - Group 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSessionGroup {
  uuid           String   @id @default(cuid())
  sessionUuid    String   @map("session_uuid")
  workspaceUuid  String   @map("workspace_uuid")
  accountUuid    String   @map("account_uuid")
  groupIndex     Int      @map("group_index")
  name           String?
  splitDirection String   @map("split_direction")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  account   Account                        @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  session   EditorWorkspaceSession         @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade)
  tabs      EditorWorkspaceSessionGroupTab[]

  @@index([sessionUuid])
  @@index([workspaceUuid])
  @@index([accountUuid])
  @@map("editor_workspace_session_groups")
}

/// EditorWorkspaceSessionGroupTab - Tab 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSessionGroupTab {
  uuid          String   @id @default(cuid())
  groupUuid     String   @map("group_uuid")
  sessionUuid   String   @map("session_uuid")
  workspaceUuid String   @map("workspace_uuid")
  accountUuid   String   @map("account_uuid")
  documentUuid  String?  @map("document_uuid")
  tabIndex      Int      @map("tab_index")
  tabType       String   @map("tab_type")
  title         String
  viewState     Json     @map("view_state")
  isPinned      Boolean  @default(false) @map("is_pinned")
  isActive      Boolean  @default(false) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account Account                     @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group   EditorWorkspaceSessionGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@index([groupUuid])
  @@index([sessionUuid])
  @@index([workspaceUuid])
  @@index([accountUuid])
  @@index([documentUuid])
  @@map("editor_workspace_session_group_tabs")
}
