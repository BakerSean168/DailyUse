// Prisma schema for DailyUse - DDD Architecture
// Based on electron modules database structure
// Switch provider to postgresql if you plan to use PostgreSQL
// and set DATABASE_URL in apps/api/.env

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account aggregate root
model Account {
  uuid                   String    @id @default(cuid())
  username               String    @unique
  email                  String?   @unique
  phone                  String?   @unique
  accountType            String    @default("local") @map("account_type") // 'local', 'online'
  status                 String    @default("active") // 'active', 'disabled', 'suspended', 'pending_verification'
  roleIds                String    @default("[]") @map("role_ids") // JSON array
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  lastLoginAt            DateTime? @map("last_login_at")
  emailVerificationToken String?   @map("email_verification_token")
  phoneVerificationCode  String?   @map("phone_verification_code")
  emailVerified          Boolean   @default(false) @map("email_verified")
  phoneVerified          Boolean   @default(false) @map("phone_verified")

  // Relations
  userProfile     UserProfile?
  authCredentials AuthCredential[]
  sessions        UserSession[]
  mfaDevices      MFADevice[]
  tokens          AuthToken[]
  repositories    Repository[]
  goals           Goal[]
  tasks           Task[]
  userData        UserData[]

  @@map("accounts")
}

// User profile entity
model UserProfile {
  uuid           String    @id @default(cuid())
  accountUuid    String    @unique @map("account_uuid")
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  displayName    String?   @map("display_name")
  sex            String? // '0' = female, '1' = male, '2' = other
  dateOfBirth    DateTime? @map("date_of_birth")
  avatarUrl      String?   @map("avatar_url")
  bio            String?
  location       String?
  website        String?
  socialAccounts String?   @map("social_accounts") // JSON object
  preferences    String? // JSON object
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("user_profiles")
}

// Authentication credentials
model AuthCredential {
  uuid              String    @id @default(cuid())
  accountUuid       String    @map("account_uuid")
  passwordHash      String    @map("password_hash")
  passwordSalt      String    @map("password_salt")
  passwordAlgorithm String    @map("password_algorithm")
  passwordCreatedAt DateTime  @map("password_created_at")
  passwordExpiresAt DateTime? @map("password_expires_at")
  isLocked          Boolean   @default(false) @map("is_locked")
  lockReason        String?   @map("lock_reason")
  failedAttempts    Int       @default(0) @map("failed_attempts")
  lastFailedAt      DateTime? @map("last_failed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([accountUuid])
  @@map("auth_credentials")
}

// User sessions
model UserSession {
  uuid           String    @id @default(cuid())
  accountUuid    String    @map("account_uuid")
  sessionId      String    @unique @map("session_id")
  accessToken    String    @map("access_token")
  refreshToken   String?   @map("refresh_token")
  deviceInfo     String?   @map("device_info") // JSON
  ipAddress      String?   @map("ip_address")
  userAgent      String?   @map("user_agent")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  lastAccessedAt DateTime? @map("last_accessed_at")
  expiresAt      DateTime  @map("expires_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("user_sessions")
}

// MFA Devices
model MFADevice {
  uuid                 String    @id @default(cuid())
  accountUuid          String    @map("account_uuid")
  type                 String // 'totp', 'sms', 'email'
  name                 String
  secretKey            String?   @map("secret_key")
  phoneNumber          String?   @map("phone_number")
  emailAddress         String?   @map("email_address")
  backupCodes          String?   @map("backup_codes") // JSON
  isVerified           Boolean   @default(false) @map("is_verified")
  isEnabled            Boolean   @default(false) @map("is_enabled")
  verificationAttempts Int       @default(0) @map("verification_attempts")
  maxAttempts          Int       @default(5) @map("max_attempts")
  createdAt            DateTime  @default(now()) @map("created_at")
  lastUsedAt           DateTime? @map("last_used_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("mfa_devices")
}

// Auth tokens (for various token types)
model AuthToken {
  uuid         String   @id @default(cuid())
  accountUuid  String   @map("account_uuid")
  tokenValue   String   @unique @map("token_value")
  tokenType    String   @map("token_type") // 'access', 'refresh', 'remember_me', 'email_verification'
  issuedAt     DateTime @default(now()) @map("issued_at")
  expiresAt    DateTime @map("expires_at")
  isRevoked    Boolean  @default(false) @map("is_revoked")
  revokeReason String?  @map("revoke_reason")
  metadata     String? // JSON

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([tokenType])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("auth_tokens")
}

// Repository aggregate
model Repository {
  uuid         String   @id @default(cuid())
  accountUuid  String   @map("account_uuid")
  name         String
  path         String
  description  String?
  relatedGoals String?  @map("related_goals") // JSON array
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("repositories")
}

// Goal aggregate
model Goal {
  uuid        String    @id @default(cuid())
  accountUuid String    @map("account_uuid")
  title       String
  description String?
  status      String    @default("active") // 'active', 'completed', 'paused'
  priority    String    @default("medium") // 'low', 'medium', 'high'
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  tasks   Task[]

  @@map("goals")
}

// Task aggregate
model Task {
  uuid        String    @id @default(cuid())
  accountUuid String    @map("account_uuid")
  goalUuid    String?   @map("goal_uuid")
  title       String
  description String?
  status      String    @default("pending") // 'pending', 'in_progress', 'completed', 'cancelled'
  priority    String    @default("medium") // 'low', 'medium', 'high'
  dueDate     DateTime? @map("due_date")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  goal    Goal?   @relation(fields: [goalUuid], references: [uuid], onDelete: SetNull)

  @@map("tasks")
}

// User data storage for modular data
model UserData {
  uuid        String   @id @default(cuid())
  accountUuid String   @map("account_uuid")
  storeName   String   @map("store_name")
  dataKey     String   @map("data_key")
  dataValue   String   @map("data_value")
  dataType    String   @default("string") @map("data_type") // 'string', 'number', 'boolean', 'json', 'binary'
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([accountUuid, storeName, dataKey])
  @@index([accountUuid])
  @@index([storeName])
  @@index([dataKey])
  @@index([dataType])
  @@index([createdAt])
  @@map("user_store_data")
}
