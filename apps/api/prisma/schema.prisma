generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================
// Account Module - DDD Design
// 账号模块 - DDD 设计
// ============================================================

/// Account 聚合根
/// 代表用户账号，包含完整的账号信息和状态
model Account {
  uuid            String    @id @default(cuid())
  username        String    @unique
  email           String    @unique
  emailVerified   Boolean   @default(false) @map("email_verified")
  phoneNumber     String?   @unique @map("phone_number")
  phoneVerified   Boolean   @default(false) @map("phone_verified")
  status          String    @default("ACTIVE") // ACTIVE | INACTIVE | SUSPENDED | DELETED
  profile         String    @db.Text // JSON: ProfileInfo
  preferences     String    @db.Text // JSON: PreferencesInfo
  subscription    String    @db.Text // JSON: SubscriptionInfo
  storage         String    @db.Text // JSON: StorageInfo
  security        String    @db.Text // JSON: SecurityInfo
  history         String    @db.Text // JSON: AccountHistoryInfo
  stats           String    @db.Text // JSON: AccountStatsInfo
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  lastActiveAt    DateTime  @default(now()) @map("last_active_at")
  deletedAt       DateTime? @map("deleted_at")

  // Relations
  authSessions             AuthSession[]
  authCredentials          AuthCredential[]
  userSettings             UserSetting[]
  goals                    Goal[]
  goalFolders              GoalFolder[]
  goalStatistics           GoalStatistics?
  reminderTemplates        ReminderTemplate[]
  reminderGroups           ReminderGroup[]
  reminderStatistics       ReminderStatistics?
  taskTemplates            TaskTemplate[]
  taskInstances            TaskInstance[]
  taskStatistics           TaskStatistics?
  notifications            Notification[]
  notificationPreferences  NotificationPreference[]
  scheduleTasks            ScheduleTask[]
  scheduleStatistics       ScheduleStatistics?
  repositories             Repository[]
  repositoryExplorers      RepositoryExplorer[]
  repositoryStatistics     RepositoryStatistics?
  editorWorkspaces         EditorWorkspace[]
  editorWorkspaceSessions  EditorWorkspaceSession[]
  editorWorkspaceGroups    EditorWorkspaceSessionGroup[]
  editorWorkspaceTabs      EditorWorkspaceSessionGroupTab[]

  @@index([username])
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@index([lastActiveAt])
  @@map("accounts")
}

// ============================================================
// Authentication Module - DDD Design
// 认证模块 - DDD 设计
// ============================================================

/// AuthSession 聚合根
/// 代表一个完整的认证会话，包含访问令牌和设备信息
model AuthSession {
  uuid                 String    @id @default(cuid())
  accountUuid          String    @map("account_uuid")
  accessToken          String    @unique @map("access_token")
  accessTokenExpiresAt DateTime  @map("access_token_expires_at")
  refreshToken         String    @db.Text @map("refresh_token") // JSON: RefreshTokenInfo
  device               String    @db.Text // JSON: DeviceInfo
  status               String    @default("ACTIVE") // ACTIVE | EXPIRED | REVOKED | LOCKED
  ipAddress            String?   @map("ip_address")
  location             String?   @db.Text // JSON: LocationInfo
  history              String    @default("[]") @db.Text // JSON: SessionHistoryInfo[]
  lastActivityAt       DateTime  @default(now()) @map("last_activity_at")
  lastActivityType     String?   @map("last_activity_type")
  createdAt            DateTime  @default(now()) @map("created_at")
  expiresAt            DateTime  @map("expires_at")
  revokedAt            DateTime? @map("revoked_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([accessToken])
  @@index([status])
  @@index([lastActivityAt])
  @@index([createdAt])
  @@map("auth_sessions")
}

/// AuthCredential 聚合根
/// 代表账号的认证凭证，支持多种认证方式
model AuthCredential {
  uuid                String    @id @default(cuid())
  accountUuid         String    @map("account_uuid")
  type                String // PASSWORD | API_KEY | BIOMETRIC | MAGIC_LINK | HARDWARE_KEY
  passwordCredential  String?   @db.Text @map("password_credential") // JSON: PasswordCredentialInfo
  apiKeyCredentials   String    @default("[]") @db.Text @map("api_key_credentials") // JSON: ApiKeyCredentialInfo[]
  rememberMeTokens    String    @default("[]") @db.Text @map("remember_me_tokens") // JSON: RememberMeTokenInfo[]
  twoFactor           String?   @db.Text @map("two_factor") // JSON: TwoFactorInfo
  biometric           String?   @db.Text // JSON: BiometricInfo
  status              String    @default("ACTIVE") // ACTIVE | DISABLED | LOCKED
  security            String    @db.Text // JSON: CredentialSecurityInfo
  history             String    @default("[]") @db.Text // JSON: CredentialHistoryInfo[]
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([type])
  @@index([status])
  @@map("auth_credentials")
}

// ============================================================
// Setting Module - DDD Design
// 设置模块 - DDD 设计
// ============================================================

/// AppConfig 聚合根
/// 代表应用程序全局配置
model AppConfig {
  uuid          String   @id @default(cuid())
  version       String
  app           String   @db.Text // JSON: AppInfo
  features      String   @db.Text // JSON: FeaturesConfig
  limits        String   @db.Text // JSON: LimitsConfig
  api           String   @db.Text // JSON: ApiConfig
  security      String   @db.Text // JSON: SecurityConfig
  notifications String   @db.Text // JSON: NotificationsConfig
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("app_configs")
}

/// UserSetting 聚合根
/// 代表用户个性化设置
model UserSetting {
  uuid         String   @id @default(cuid())
  accountUuid  String   @map("account_uuid")
  appearance   String   @db.Text // JSON: AppearanceSettings
  locale       String   @db.Text // JSON: LocaleSettings
  workflow     String   @db.Text // JSON: WorkflowSettings
  shortcuts    String   @db.Text // JSON: ShortcutsSettings
  privacy      String   @db.Text // JSON: PrivacySettings
  experimental String   @db.Text // JSON: ExperimentalSettings
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([accountUuid])
  @@index([accountUuid])
  @@map("user_settings")
}

/// Setting 聚合根
/// 代表动态配置项（通用设置）
model Setting {
  uuid        String    @id @default(cuid())
  key         String    @unique
  value       String    @db.Text // JSON
  type        String // STRING | NUMBER | BOOLEAN | JSON | ARRAY
  category    String
  description String?
  validation  String?   @db.Text // JSON: ValidationRules
  isSystem    Boolean   @default(false) @map("is_system")
  isSecret    Boolean   @default(false) @map("is_secret")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  history SettingHistory[]

  @@index([key])
  @@index([category])
  @@index([isSystem])
  @@map("settings")
}

/// SettingHistory 实体
/// 设置变更历史记录
model SettingHistory {
  uuid         String   @id @default(cuid())
  settingUuid  String   @map("setting_uuid")
  settingKey   String   @map("setting_key")
  oldValue     String   @db.Text // JSON
  newValue     String   @db.Text // JSON
  operatorUuid String?  @map("operator_uuid")
  operatorType String   @map("operator_type") // USER | SYSTEM | API
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  setting Setting @relation(fields: [settingUuid], references: [uuid], onDelete: Cascade)

  @@index([settingUuid])
  @@index([settingKey])
  @@index([operatorUuid])
  @@index([createdAt])
  @@map("setting_histories")
}

// ============================================================
// Goal Module - DDD Design
// 目标模块 - DDD 设计
// ============================================================

/// Goal 聚合根
/// 代表一个完整的目标，包含关键结果、进度记录和复盘
model Goal {
  uuid            String    @id @default(cuid())
  accountUuid     String    @map("account_uuid")
  title           String
  description     String?   @db.Text
  status          String    @default("NOT_STARTED") // NOT_STARTED | IN_PROGRESS | COMPLETED | ARCHIVED | CANCELLED
  importance      String    @default("MEDIUM") // LOW | MEDIUM | HIGH | CRITICAL
  urgency         String    @default("MEDIUM") // LOW | MEDIUM | HIGH | URGENT
  category        String?
  tags            String    @default("[]") @db.Text // JSON array
  startDate       DateTime? @map("start_date")
  targetDate      DateTime? @map("target_date")
  completedAt     DateTime? @map("completed_at")
  archivedAt      DateTime? @map("archived_at")
  folderUuid      String?   @map("folder_uuid")
  parentGoalUuid  String?   @map("parent_goal_uuid")
  sortOrder       Int       @default(0) @map("sort_order")
  reminderConfig  String?   @db.Text @map("reminder_config") // JSON: ReminderConfig
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  // Relations
  account      Account       @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  folder       GoalFolder?   @relation(fields: [folderUuid], references: [uuid], onDelete: SetNull)
  parentGoal   Goal?         @relation("GoalSubGoals", fields: [parentGoalUuid], references: [uuid], onDelete: SetNull)
  subGoals     Goal[]        @relation("GoalSubGoals")
  keyResults   KeyResult[]
  reviews      GoalReview[]
  records      GoalRecord[]

  @@index([accountUuid])
  @@index([folderUuid])
  @@index([parentGoalUuid])
  @@index([status])
  @@index([importance])
  @@index([urgency])
  @@index([createdAt])
  @@map("goals")
}

/// GoalFolder 聚合根
/// 代表目标文件夹，用于组织目标
model GoalFolder {
  uuid                String    @id @default(cuid())
  accountUuid         String    @map("account_uuid")
  name                String
  description         String?   @db.Text
  icon                String?
  color               String?
  parentFolderUuid    String?   @map("parent_folder_uuid")
  sortOrder           Int       @default(0) @map("sort_order")
  isSystemFolder      Boolean   @default(false) @map("is_system_folder")
  folderType          String?   @map("folder_type") // WORK | PERSONAL | LEARNING | HEALTH | OTHER
  goalCount           Int       @default(0) @map("goal_count")
  completedGoalCount  Int       @default(0) @map("completed_goal_count")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  deletedAt           DateTime? @map("deleted_at")

  // Relations
  account      Account      @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  parentFolder GoalFolder?  @relation("GoalFolderSubFolders", fields: [parentFolderUuid], references: [uuid], onDelete: SetNull)
  subFolders   GoalFolder[] @relation("GoalFolderSubFolders")
  goals        Goal[]

  @@index([accountUuid])
  @@index([parentFolderUuid])
  @@index([isSystemFolder])
  @@index([createdAt])
  @@map("goal_folders")
}

/// GoalStatistics 聚合根
/// 代表用户的目标统计数据
model GoalStatistics {
  accountUuid              String   @id @map("account_uuid")
  totalGoals               Int      @default(0) @map("total_goals")
  activeGoals              Int      @default(0) @map("active_goals")
  completedGoals           Int      @default(0) @map("completed_goals")
  archivedGoals            Int      @default(0) @map("archived_goals")
  overdueGoals             Int      @default(0) @map("overdue_goals")
  totalKeyResults          Int      @default(0) @map("total_key_results")
  completedKeyResults      Int      @default(0) @map("completed_key_results")
  averageProgress          Float    @default(0) @map("average_progress")
  goalsByImportance        String   @default("{}") @db.Text @map("goals_by_importance") // JSON
  goalsByUrgency           String   @default("{}") @db.Text @map("goals_by_urgency") // JSON
  goalsByCategory          String   @default("{}") @db.Text @map("goals_by_category") // JSON
  goalsByStatus            String   @default("{}") @db.Text @map("goals_by_status") // JSON
  goalsCreatedThisWeek     Int      @default(0) @map("goals_created_this_week")
  goalsCompletedThisWeek   Int      @default(0) @map("goals_completed_this_week")
  goalsCreatedThisMonth    Int      @default(0) @map("goals_created_this_month")
  goalsCompletedThisMonth  Int      @default(0) @map("goals_completed_this_month")
  totalReviews             Int      @default(0) @map("total_reviews")
  averageRating            Float?   @map("average_rating")
  lastCalculatedAt         DateTime @default(now()) @map("last_calculated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("goal_statistics")
}

/// KeyResult 实体
/// 关键结果，属于 Goal 聚合
model KeyResult {
  uuid        String   @id @default(cuid())
  goalUuid    String   @map("goal_uuid")
  title       String
  description String?  @db.Text
  progress    String   @db.Text // JSON: KeyResultProgress
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  goal    Goal         @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)
  records GoalRecord[]

  @@index([goalUuid])
  @@index([createdAt])
  @@map("key_results")
}

/// GoalReview 实体
/// 目标复盘记录
model GoalReview {
  uuid                 String   @id @default(cuid())
  goalUuid             String   @map("goal_uuid")
  type                 String // DAILY | WEEKLY | MONTHLY | QUARTERLY | YEARLY | CUSTOM
  rating               Int
  summary              String   @db.Text
  achievements         String?  @db.Text
  challenges           String?  @db.Text
  improvements         String?  @db.Text
  keyResultSnapshots   String   @db.Text @map("key_result_snapshots") // JSON array
  reviewedAt           DateTime @map("reviewed_at")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  goal Goal @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)

  @@index([goalUuid])
  @@index([type])
  @@index([reviewedAt])
  @@index([createdAt])
  @@map("goal_reviews")
}

/// GoalRecord 实体
/// 关键结果进度记录
model GoalRecord {
  uuid           String   @id @default(cuid())
  keyResultUuid  String   @map("key_result_uuid")
  goalUuid       String   @map("goal_uuid")
  previousValue  Float    @map("previous_value")
  newValue       Float    @map("new_value")
  changeAmount   Float    @map("change_amount")
  note           String?  @db.Text
  recordedAt     DateTime @map("recorded_at")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  keyResult KeyResult @relation(fields: [keyResultUuid], references: [uuid], onDelete: Cascade)
  goal      Goal      @relation(fields: [goalUuid], references: [uuid], onDelete: Cascade)

  @@index([keyResultUuid])
  @@index([goalUuid])
  @@index([recordedAt])
  @@index([createdAt])
  @@map("goal_records")
}

// ============================================================
// Reminder Module - DDD Design
// 提醒模块 - DDD 设计
// ============================================================

/// ReminderTemplate 聚合根
/// 代表提醒模板，包含触发配置和历史记录
model ReminderTemplate {
  uuid               String    @id @default(cuid())
  accountUuid        String    @map("account_uuid")
  title              String
  description        String?   @db.Text
  type               String // ONE_TIME | RECURRING | CONDITIONAL
  trigger            String    @db.Text // JSON: TriggerConfig
  recurrence         String?   @db.Text // JSON: RecurrenceConfig
  activeTime         String    @db.Text @map("active_time") // JSON: ActiveTimeConfig
  activeHours        String?   @db.Text @map("active_hours") // JSON: ActiveHoursConfig
  notificationConfig String    @db.Text @map("notification_config") // JSON: NotificationConfig
  selfEnabled        Boolean   @default(true) @map("self_enabled")
  status             String    @default("ACTIVE") // ACTIVE | PAUSED | EXPIRED | DISABLED
  groupUuid          String?   @map("group_uuid")
  importanceLevel    String    @default("MEDIUM") @map("importance_level") // LOW | MEDIUM | HIGH | CRITICAL
  tags               String    @default("[]") @db.Text // JSON array
  color              String?
  icon               String?
  nextTriggerAt      DateTime? @map("next_trigger_at")
  stats              String    @db.Text // JSON: ReminderStats
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  // Relations
  account Account           @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group   ReminderGroup?    @relation(fields: [groupUuid], references: [uuid], onDelete: SetNull)
  history ReminderHistory[]

  @@index([accountUuid])
  @@index([groupUuid])
  @@index([status])
  @@index([type])
  @@index([nextTriggerAt])
  @@index([createdAt])
  @@map("reminder_templates")
}

/// ReminderGroup 聚合根
/// 代表提醒分组，用于管理多个提醒模板
model ReminderGroup {
  uuid        String    @id @default(cuid())
  accountUuid String    @map("account_uuid")
  name        String
  description String?   @db.Text
  color       String?
  icon        String?
  controlMode String    @default("INDEPENDENT") @map("control_mode") // INDEPENDENT | GROUP_CONTROL | CASCADING
  enabled     Boolean   @default(true)
  status      String    @default("ACTIVE") // ACTIVE | PAUSED | DISABLED
  order       Int       @default(0)
  stats       String    @db.Text // JSON: GroupStats
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  account   Account            @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  templates ReminderTemplate[]

  @@index([accountUuid])
  @@index([status])
  @@index([createdAt])
  @@map("reminder_groups")
}

/// ReminderStatistics 聚合根
/// 代表用户的提醒统计数据
model ReminderStatistics {
  uuid          String   @id @default(cuid())
  accountUuid   String   @unique @map("account_uuid")
  templateStats String   @db.Text @map("template_stats") // JSON: TemplateStatsInfo
  groupStats    String   @db.Text @map("group_stats") // JSON: GroupStatsInfo
  triggerStats  String   @db.Text @map("trigger_stats") // JSON: TriggerStatsInfo
  calculatedAt  DateTime @default(now()) @map("calculated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("reminder_statistics")
}

/// ReminderHistory 实体
/// 提醒触发历史记录
model ReminderHistory {
  uuid                  String    @id @default(cuid())
  templateUuid          String    @map("template_uuid")
  triggeredAt           DateTime  @map("triggered_at")
  result                String // SUCCESS | FAILED | SKIPPED | CANCELLED
  error                 String?   @db.Text
  notificationSent      Boolean   @default(false) @map("notification_sent")
  notificationChannels  String?   @db.Text @map("notification_channels") // JSON array
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  template ReminderTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([templateUuid])
  @@index([triggeredAt])
  @@index([result])
  @@index([createdAt])
  @@map("reminder_histories")
}

// ============================================================
// Task Module - DDD Design
// 任务模块 - DDD 设计
// ============================================================

/// TaskTemplate 聚合根
/// 代表任务模板，用于生成任务实例
model TaskTemplate {
  uuid              String    @id @default(cuid())
  accountUuid       String    @map("account_uuid")
  title             String
  description       String?   @db.Text
  taskType          String    @map("task_type") // ONE_TIME | RECURRING | DAILY_ROUTINE
  timeConfig        String    @db.Text @map("time_config") // JSON: TaskTimeConfig
  recurrenceRule    String?   @db.Text @map("recurrence_rule") // JSON: RecurrenceRule
  reminderConfig    String?   @db.Text @map("reminder_config") // JSON: TaskReminderConfig
  importance        String    @default("MEDIUM") // LOW | MEDIUM | HIGH | CRITICAL
  urgency           String    @default("MEDIUM") // LOW | MEDIUM | HIGH | URGENT
  goalBinding       String?   @db.Text @map("goal_binding") // JSON: TaskGoalBinding
  folderUuid        String?   @map("folder_uuid")
  tags              String    @default("[]") @db.Text // JSON array
  color             String?
  status            String    @default("ACTIVE") // ACTIVE | PAUSED | ARCHIVED
  lastGeneratedDate DateTime? @map("last_generated_date")
  generateAheadDays Int       @default(7) @map("generate_ahead_days")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  // Relations
  account   Account                 @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  instances TaskInstance[]
  history   TaskTemplateHistory[]

  @@index([accountUuid])
  @@index([taskType])
  @@index([status])
  @@index([folderUuid])
  @@index([createdAt])
  @@map("task_templates")
}

/// TaskInstance 聚合根
/// 代表具体的任务实例
model TaskInstance {
  uuid             String    @id @default(cuid())
  templateUuid     String    @map("template_uuid")
  accountUuid      String    @map("account_uuid")
  instanceDate     DateTime  @map("instance_date")
  timeConfig       String    @db.Text @map("time_config") // JSON: TaskTimeConfig
  status           String    @default("PENDING") // PENDING | IN_PROGRESS | COMPLETED | SKIPPED | EXPIRED
  completionRecord String?   @db.Text @map("completion_record") // JSON: CompletionRecord
  skipRecord       String?   @db.Text @map("skip_record") // JSON: SkipRecord
  actualStartTime  DateTime? @map("actual_start_time")
  actualEndTime    DateTime? @map("actual_end_time")
  note             String?   @db.Text
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  account  Account      @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  template TaskTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@unique([templateUuid, instanceDate])
  @@index([accountUuid])
  @@index([templateUuid])
  @@index([instanceDate])
  @@index([status])
  @@index([createdAt])
  @@map("task_instances")
}

/// TaskStatistics 聚合根
/// 代表用户的任务统计数据
model TaskStatistics {
  uuid               String   @id @default(cuid())
  accountUuid        String   @unique @map("account_uuid")
  templateStats      String   @db.Text @map("template_stats") // JSON: TemplateStatsInfo
  instanceStats      String   @db.Text @map("instance_stats") // JSON: InstanceStatsInfo
  completionStats    String   @db.Text @map("completion_stats") // JSON: CompletionStatsInfo
  timeStats          String   @db.Text @map("time_stats") // JSON: TimeStatsInfo
  distributionStats  String   @db.Text @map("distribution_stats") // JSON: DistributionStatsInfo
  calculatedAt       DateTime @default(now()) @map("calculated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("task_statistics")
}

/// TaskTemplateHistory 实体
/// 任务模板变更历史
model TaskTemplateHistory {
  uuid         String   @id @default(cuid())
  templateUuid String   @map("template_uuid")
  action       String // CREATED | UPDATED | PAUSED | RESUMED | ARCHIVED
  changes      String?  @db.Text // JSON
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  template TaskTemplate @relation(fields: [templateUuid], references: [uuid], onDelete: Cascade)

  @@index([templateUuid])
  @@index([createdAt])
  @@map("task_template_histories")
}

// ============================================================
// Notification Module - DDD Design
// 通知模块 - DDD 设计
// ============================================================

/// Notification 聚合根
/// 代表一条完整的通知，包含渠道和历史记录
model Notification {
  uuid              String    @id @default(cuid())
  accountUuid       String    @map("account_uuid")
  title             String
  content           String    @db.Text
  type              String // SYSTEM | TASK | GOAL | SCHEDULE | REMINDER | ACCOUNT | CUSTOM
  category          String // TASK | GOAL | SCHEDULE | REMINDER | ACCOUNT | SYSTEM
  importance        String    @default("MEDIUM") // LOW | MEDIUM | HIGH | CRITICAL
  urgency           String    @default("MEDIUM") // LOW | MEDIUM | HIGH | URGENT
  status            String    @default("PENDING") // PENDING | SENT | DELIVERED | READ | FAILED | EXPIRED
  isRead            Boolean   @default(false) @map("is_read")
  readAt            DateTime? @map("read_at")
  relatedEntityType String?   @map("related_entity_type") // TASK | GOAL | SCHEDULE | REMINDER | REPOSITORY | EDITOR | OTHER
  relatedEntityUuid String?   @map("related_entity_uuid")
  actions           String?   @db.Text // JSON array: NotificationAction[]
  metadata          String?   @db.Text // JSON: NotificationMetadata
  expiresAt         DateTime? @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  sentAt            DateTime? @map("sent_at")
  deliveredAt       DateTime? @map("delivered_at")
  deletedAt         DateTime? @map("deleted_at")

  // Relations
  account  Account                @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  channels NotificationChannel[]
  history  NotificationHistory[]

  @@index([accountUuid])
  @@index([type])
  @@index([category])
  @@index([status])
  @@index([isRead])
  @@index([relatedEntityType])
  @@index([relatedEntityUuid])
  @@index([createdAt])
  @@map("notifications")
}

/// NotificationTemplate 聚合根
/// 代表通知模板
model NotificationTemplate {
  uuid             String   @id @default(cuid())
  name             String
  description      String?  @db.Text
  type             String // SYSTEM | TASK | GOAL | SCHEDULE | REMINDER | ACCOUNT | CUSTOM
  category         String // TASK | GOAL | SCHEDULE | REMINDER | ACCOUNT | SYSTEM
  template         String   @db.Text // JSON: NotificationTemplateConfig
  isActive         Boolean  @default(true) @map("is_active")
  isSystemTemplate Boolean  @default(false) @map("is_system_template")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([category])
  @@index([isActive])
  @@index([isSystemTemplate])
  @@map("notification_templates")
}

/// NotificationPreference 聚合根
/// 代表用户的通知偏好设置
model NotificationPreference {
  uuid          String   @id @default(cuid())
  accountUuid   String   @unique @map("account_uuid")
  enabled       Boolean  @default(true)
  channels      String   @db.Text // JSON: ChannelPreferences
  categories    String   @db.Text // JSON: CategoryPreferences
  doNotDisturb  String?  @db.Text @map("do_not_disturb") // JSON: DoNotDisturbConfig
  rateLimit     String?  @db.Text @map("rate_limit") // JSON: RateLimit
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@map("notification_preferences")
}

/// NotificationChannel 实体
/// 通知发送渠道记录
model NotificationChannel {
  uuid             String    @id @default(cuid())
  notificationUuid String    @map("notification_uuid")
  channelType      String    @map("channel_type") // IN_APP | EMAIL | PUSH | SMS
  status           String    @default("PENDING") // PENDING | SENDING | SENT | DELIVERED | FAILED
  recipient        String?
  sendAttempts     Int       @default(0) @map("send_attempts")
  maxRetries       Int       @default(3) @map("max_retries")
  error            String?   @db.Text // JSON: ChannelError
  response         String?   @db.Text // JSON: ChannelResponse
  createdAt        DateTime  @default(now()) @map("created_at")
  sentAt           DateTime? @map("sent_at")
  deliveredAt      DateTime? @map("delivered_at")
  failedAt         DateTime? @map("failed_at")

  // Relations
  notification Notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])
  @@index([channelType])
  @@index([status])
  @@index([createdAt])
  @@map("notification_channels")
}

/// NotificationHistory 实体
/// 通知操作历史记录
model NotificationHistory {
  uuid             String   @id @default(cuid())
  notificationUuid String   @map("notification_uuid")
  action           String // CREATED | SENT | READ | DELETED | etc.
  details          String?  @db.Text // JSON
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  notification Notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])
  @@index([action])
  @@index([createdAt])
  @@map("notification_histories")
}

// ============================================================
// Schedule Module - DDD Design
// 调度模块 - DDD 设计
// ============================================================

/// ScheduleTask 聚合根
/// 代表一个完整的调度任务，包含配置和执行记录
model ScheduleTask {
  uuid                   String    @id @default(cuid())
  accountUuid            String    @map("account_uuid")
  name                   String
  description            String?   @db.Text
  sourceModule           String    @map("source_module") // TASK | GOAL | REMINDER | NOTIFICATION | REPOSITORY | CUSTOM
  sourceEntityId         String    @map("source_entity_id")
  status                 String    @default("PENDING") // PENDING | RUNNING | COMPLETED | FAILED | CANCELLED | PAUSED
  enabled                Boolean   @default(true)
  cronExpression         String?   @map("cron_expression")
  timezone               String    @default("UTC")
  startDate              DateTime? @map("start_date")
  endDate                DateTime? @map("end_date")
  maxExecutions          Int?      @map("max_executions")
  nextRunAt              DateTime? @map("next_run_at")
  lastRunAt              DateTime? @map("last_run_at")
  executionCount         Int       @default(0) @map("execution_count")
  lastExecutionStatus    String?   @map("last_execution_status")
  lastExecutionDuration  Int?      @map("last_execution_duration")
  consecutiveFailures    Int       @default(0) @map("consecutive_failures")
  maxRetries             Int       @default(3) @map("max_retries")
  initialDelayMs         Int       @default(1000) @map("initial_delay_ms")
  maxDelayMs             Int       @default(60000) @map("max_delay_ms")
  backoffMultiplier      Float     @default(2) @map("backoff_multiplier")
  retryableStatuses      String    @default("[]") @db.Text @map("retryable_statuses") // JSON array
  payload                String?   @db.Text // JSON
  tags                   String    @default("[]") @db.Text // JSON array
  priority               String    @default("MEDIUM") // LOW | MEDIUM | HIGH | CRITICAL
  timeout                Int       @default(300000) // milliseconds
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  account    Account              @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  executions ScheduleExecution[]

  @@index([accountUuid])
  @@index([sourceModule])
  @@index([sourceEntityId])
  @@index([status])
  @@index([enabled])
  @@index([nextRunAt])
  @@index([createdAt])
  @@map("schedule_tasks")
}

/// ScheduleStatistics 聚合根
/// 代表调度任务的统计数据
model ScheduleStatistics {
  id                     Int      @id @default(autoincrement())
  accountUuid            String   @unique @map("account_uuid")
  totalTasks             Int      @default(0) @map("total_tasks")
  activeTasks            Int      @default(0) @map("active_tasks")
  pausedTasks            Int      @default(0) @map("paused_tasks")
  completedTasks         Int      @default(0) @map("completed_tasks")
  cancelledTasks         Int      @default(0) @map("cancelled_tasks")
  failedTasks            Int      @default(0) @map("failed_tasks")
  totalExecutions        Int      @default(0) @map("total_executions")
  successfulExecutions   Int      @default(0) @map("successful_executions")
  failedExecutions       Int      @default(0) @map("failed_executions")
  skippedExecutions      Int      @default(0) @map("skipped_executions")
  timeoutExecutions      Int      @default(0) @map("timeout_executions")
  avgExecutionDuration   Float    @default(0) @map("avg_execution_duration")
  minExecutionDuration   Float    @default(0) @map("min_execution_duration")
  maxExecutionDuration   Float    @default(0) @map("max_execution_duration")
  moduleStatistics       String   @db.Text @map("module_statistics") // JSON
  lastUpdatedAt          DateTime @default(now()) @map("last_updated_at")
  createdAt              DateTime @default(now()) @map("created_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("schedule_statistics")
}

/// ScheduleExecution 实体
/// 调度任务执行记录
model ScheduleExecution {
  uuid          String    @id @default(cuid())
  taskUuid      String    @map("task_uuid")
  executionTime DateTime  @map("execution_time")
  status        String // PENDING | RUNNING | SUCCESS | FAILED | TIMEOUT | SKIPPED | CANCELLED
  duration      Int?
  result        String?   @db.Text // JSON
  error         String?   @db.Text
  retryCount    Int       @default(0) @map("retry_count")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  task ScheduleTask @relation(fields: [taskUuid], references: [uuid], onDelete: Cascade)

  @@index([taskUuid])
  @@index([status])
  @@index([executionTime])
  @@index([createdAt])
  @@map("schedule_executions")
}

// ========== Repository Module ==========

model Repository {
  uuid           String    @id @default(cuid())
  accountUuid    String    @map("account_uuid")
  name           String
  type           String // RepositoryType: 'file', 'git', 'web', 'database', 'api', 'other'
  path           String
  description    String?
  config         String    @db.Text // JSON: RepositoryConfig
  relatedGoals   String?   @map("related_goals") // JSON array of goal UUIDs
  status         String    @default("active") // RepositoryStatus: 'active', 'archived', 'readonly', 'syncing', 'error'
  git            String?   @db.Text // JSON: GitInfo (optional for git repositories)
  syncStatus     String?   @map("sync_status") @db.Text // JSON: SyncStatus (optional)
  stats          String    @db.Text // JSON: RepositoryStats
  lastAccessedAt DateTime? @map("last_accessed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  account   Account              @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  resources RepositoryResource[]
  explorers RepositoryExplorer[]

  @@unique([accountUuid, path])
  @@index([accountUuid])
  @@index([type])
  @@index([status])
  @@index([path])
  @@index([createdAt])
  @@index([lastAccessedAt])
  @@map("repositories")
}

model RepositoryResource {
  uuid           String    @id @default(cuid())
  repositoryUuid String    @map("repository_uuid")
  name           String
  type           String // ResourceType: 'file', 'folder', 'link', 'image', 'video', 'document', 'code', 'data', 'config', 'other'
  path           String
  size           Int? // File size in bytes
  description    String?
  author         String?
  version        String?
  tags           String?   @db.Text // JSON array of tags
  category       String?
  status         String    @default("active") // ResourceStatus: 'active', 'archived', 'deleted', 'broken'
  metadata       String?   @db.Text // JSON: additional metadata
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  modifiedAt     DateTime? @map("modified_at") // File system modification time

  // Relations
  repository       Repository          @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  sourceReferences ResourceReference[] @relation("SourceResource")
  targetReferences ResourceReference[] @relation("TargetResource")
  linkedContents   LinkedContent[]

  @@unique([repositoryUuid, path])
  @@index([repositoryUuid])
  @@index([type])
  @@index([status])
  @@index([path])
  @@index([createdAt])
  @@map("repository_resources")
}

model ResourceReference {
  uuid               String    @id @default(cuid())
  sourceResourceUuid String    @map("source_resource_uuid")
  targetResourceUuid String    @map("target_resource_uuid")
  referenceType      String    @map("reference_type") // ReferenceType: 'import', 'include', 'link', 'dependency', 'related', 'other'
  description        String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  lastVerifiedAt     DateTime? @map("last_verified_at")

  // Relations
  sourceResource RepositoryResource @relation("SourceResource", fields: [sourceResourceUuid], references: [uuid], onDelete: Cascade)
  targetResource RepositoryResource @relation("TargetResource", fields: [targetResourceUuid], references: [uuid], onDelete: Cascade)

  @@unique([sourceResourceUuid, targetResourceUuid, referenceType])
  @@index([sourceResourceUuid])
  @@index([targetResourceUuid])
  @@index([referenceType])
  @@map("resource_references")
}

model LinkedContent {
  uuid          String    @id @default(cuid())
  resourceUuid  String    @map("resource_uuid")
  title         String
  url           String
  contentType   String    @map("content_type") // ContentType: 'article', 'video', 'documentation', 'tutorial', 'reference', 'tool', 'library', 'other'
  description   String?   @db.Text
  thumbnail     String?
  author        String?
  publishedAt   DateTime? @map("published_at")
  isAccessible  Boolean   @default(true) @map("is_accessible")
  lastCheckedAt DateTime? @map("last_checked_at")
  cachedAt      DateTime? @map("cached_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  resource RepositoryResource @relation(fields: [resourceUuid], references: [uuid], onDelete: Cascade)

  @@index([resourceUuid])
  @@index([contentType])
  @@index([url])
  @@map("linked_contents")
}

model RepositoryExplorer {
  uuid           String    @id @default(cuid())
  repositoryUuid String    @map("repository_uuid")
  accountUuid    String    @map("account_uuid")
  name           String
  description    String?
  currentPath    String    @map("current_path")
  filters        String?   @db.Text // JSON: filter configuration
  viewConfig     String?   @map("view_config") @db.Text // JSON: view configuration
  pinnedPaths    String?   @map("pinned_paths") @db.Text // JSON array of pinned paths
  recentPaths    String?   @map("recent_paths") @db.Text // JSON array of recent paths
  lastScanAt     DateTime? @map("last_scan_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  repository Repository @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  account    Account    @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([repositoryUuid, accountUuid])
  @@index([repositoryUuid])
  @@index([accountUuid])
  @@map("repository_explorers")
}

// ============ Repository Statistics (统计数据) ============

model RepositoryStatistics {
  id          Int    @id @default(autoincrement())
  accountUuid String @unique @map("account_uuid")

  // 仓库统计
  totalRepositories    Int @default(0) @map("total_repositories")
  activeRepositories   Int @default(0) @map("active_repositories")
  archivedRepositories Int @default(0) @map("archived_repositories")

  // 资源统计
  totalResources Int @default(0) @map("total_resources")
  totalFiles     Int @default(0) @map("total_files")
  totalFolders   Int @default(0) @map("total_folders")

  // Git 统计
  gitEnabledRepos Int @default(0) @map("git_enabled_repos")
  totalCommits    Int @default(0) @map("total_commits")

  // 引用统计
  totalReferences     Int @default(0) @map("total_references")
  totalLinkedContents Int @default(0) @map("total_linked_contents")

  // 存储统计
  totalSizeBytes BigInt @default(0) @map("total_size_bytes")

  // 时间戳
  lastUpdatedAt DateTime @default(now()) @map("last_updated_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("repository_statistics")
}

// ============================================================
// Editor Module - DDD Design
// 编辑器模块 - DDD 设计
// ============================================================

/// EditorWorkspace 聚合根
/// 代表一个完整的编辑器工作区，包含多个会话
model EditorWorkspace {
  uuid        String   @id @default(cuid())
  accountUuid String   @map("account_uuid")
  name        String
  description String?
  projectPath String   @unique @map("project_path")
  projectType String   @map("project_type")
  layout      Json
  settings    Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  accessedAt  DateTime @default(now()) @map("accessed_at")

  // Relations
  account  Account                  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  sessions EditorWorkspaceSession[]

  @@index([accountUuid])
  @@index([isActive])
  @@index([accessedAt])
  @@map("editor_workspaces")
}

/// EditorWorkspaceSession - Session 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSession {
  uuid          String   @id @default(cuid())
  workspaceUuid String   @map("workspace_uuid")
  accountUuid   String   @map("account_uuid")
  name          String
  layout        Json
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account   Account                       @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  workspace EditorWorkspace               @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade)
  groups    EditorWorkspaceSessionGroup[]

  @@index([workspaceUuid])
  @@index([accountUuid])
  @@index([isActive])
  @@map("editor_workspace_sessions")
}

/// EditorWorkspaceSessionGroup - Group 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSessionGroup {
  uuid           String   @id @default(cuid())
  sessionUuid    String   @map("session_uuid")
  workspaceUuid  String   @map("workspace_uuid")
  accountUuid    String   @map("account_uuid")
  groupIndex     Int      @map("group_index")
  name           String?
  splitDirection String   @map("split_direction")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  account Account                          @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  session EditorWorkspaceSession           @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade)
  tabs    EditorWorkspaceSessionGroupTab[]

  @@index([sessionUuid])
  @@index([workspaceUuid])
  @@index([accountUuid])
  @@map("editor_workspace_session_groups")
}

/// EditorWorkspaceSessionGroupTab - Tab 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSessionGroupTab {
  uuid          String   @id @default(cuid())
  groupUuid     String   @map("group_uuid")
  sessionUuid   String   @map("session_uuid")
  workspaceUuid String   @map("workspace_uuid")
  accountUuid   String   @map("account_uuid")
  documentUuid  String?  @map("document_uuid")
  tabIndex      Int      @map("tab_index")
  tabType       String   @map("tab_type")
  title         String
  viewState     Json     @map("view_state")
  isPinned      Boolean  @default(false) @map("is_pinned")
  isActive      Boolean  @default(false) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account Account                     @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group   EditorWorkspaceSessionGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@index([groupUuid])
  @@index([sessionUuid])
  @@index([workspaceUuid])
  @@index([accountUuid])
  @@index([documentUuid])
  @@map("editor_workspace_session_group_tabs")
}
