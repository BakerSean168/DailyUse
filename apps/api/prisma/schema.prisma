generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================
// Account Module - DDD Design
// 账户模块 - DDD 设计
// ============================================================

/// Account 聚合根
/// 代表一个完整的用户账户，包含订阅和历史记录
model Account {
  uuid           String    @id @default(cuid())
  username       String    @unique
  email          String    @unique
  emailVerified  Boolean   @default(false) @map("email_verified")
  phoneNumber    String?   @map("phone_number")
  phoneVerified  Boolean   @default(false) @map("phone_verified")
  status         String    @default("ACTIVE") // AccountStatus: 'ACTIVE', 'INACTIVE', 'SUSPENDED', 'DELETED'
  profile        String    @db.Text // JSON: profile data
  preferences    String    @db.Text // JSON: user preferences
  subscription   String?   @db.Text // JSON: subscription data (optional)
  storage        String    @db.Text // JSON: storage info
  security       String    @db.Text // JSON: security settings
  history        String    @default("[]") @db.Text // JSON array of AccountHistory
  stats          String    @db.Text // JSON: account statistics
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  lastActiveAt   DateTime? @map("last_active_at")
  deletedAt      DateTime? @map("deleted_at")

  // Relations
  goals                 Goal[]
  repositories          Repository[]
  repositoryExplorers   RepositoryExplorer[]
  repositoryStatistics  RepositoryStatistics[]
  editorWorkspaces      EditorWorkspace[]
  editorSessions        EditorWorkspaceSession[]
  editorGroups          EditorWorkspaceSessionGroup[]
  editorTabs            EditorWorkspaceSessionGroupTab[]
  settings              Setting[]
  userSettings          UserSetting[]
  authCredentials       AuthCredential[]
  authSessions          AuthSession[]
  reminderStatistics    ReminderStatistics?

  @@index([username])
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@index([lastActiveAt])
  @@map("accounts")
}

/// AuthCredential 聚合根
/// 代表用户的认证凭据（密码/API密钥）
model AuthCredential {
  uuid        String   @id @default(cuid())
  accountUuid String   @map("account_uuid")
  type        String // CredentialType: 'PASSWORD', 'API_KEY'
  data        String   @db.Text // JSON: credential data (encrypted)
  metadata    String   @db.Text // JSON: credential metadata
  history     String   @default("[]") @db.Text // JSON array of CredentialHistory
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  revokedAt   DateTime? @map("revoked_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([type])
  @@index([expiresAt])
  @@map("auth_credentials")
}

/// AuthSession 聚合根
/// 代表用户的认证会话
model AuthSession {
  uuid                  String   @id @default(cuid())
  accountUuid           String   @map("account_uuid")
  status                String   @default("ACTIVE") // SessionStatus: 'ACTIVE', 'EXPIRED', 'REVOKED'
  accessToken           String   @unique @map("access_token")
  accessTokenExpiresAt  DateTime @map("access_token_expires_at")
  refreshToken          String   @unique @map("refresh_token")
  refreshTokenExpiresAt DateTime @map("refresh_token_expires_at")
  device                String   @db.Text // JSON: DeviceInfo
  ipAddress             String?  @map("ip_address")
  userAgent             String?  @map("user_agent")
  history               String   @default("[]") @db.Text // JSON array of SessionHistory
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  lastAccessedAt        DateTime @map("last_accessed_at")
  revokedAt             DateTime? @map("revoked_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@index([status])
  @@index([accessToken])
  @@index([refreshToken])
  @@index([accessTokenExpiresAt])
  @@index([lastAccessedAt])
  @@map("auth_sessions")
}

// ========== Repository Module ==========

model Repository {
  uuid           String    @id @default(cuid())
  accountUuid    String    @map("account_uuid")
  name           String
  type           String // RepositoryType: 'file', 'git', 'web', 'database', 'api', 'other'
  path           String
  description    String?
  config         String    @db.Text // JSON: RepositoryConfig
  relatedGoals   String?   @map("related_goals") // JSON array of goal UUIDs
  status         String    @default("active") // RepositoryStatus: 'active', 'archived', 'readonly', 'syncing', 'error'
  git            String?   @db.Text // JSON: GitInfo (optional for git repositories)
  syncStatus     String?   @map("sync_status") @db.Text // JSON: SyncStatus (optional)
  stats          String    @db.Text // JSON: RepositoryStats
  lastAccessedAt DateTime? @map("last_accessed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  account   Account              @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  resources RepositoryResource[]
  explorers RepositoryExplorer[]

  @@unique([accountUuid, path])
  @@index([accountUuid])
  @@index([type])
  @@index([status])
  @@index([path])
  @@index([createdAt])
  @@index([lastAccessedAt])
  @@map("repositories")
}

model RepositoryResource {
  uuid           String    @id @default(cuid())
  repositoryUuid String    @map("repository_uuid")
  name           String
  type           String // ResourceType: 'file', 'folder', 'link', 'image', 'video', 'document', 'code', 'data', 'config', 'other'
  path           String
  size           Int? // File size in bytes
  description    String?
  author         String?
  version        String?
  tags           String?   @db.Text // JSON array of tags
  category       String?
  status         String    @default("active") // ResourceStatus: 'active', 'archived', 'deleted', 'broken'
  metadata       String?   @db.Text // JSON: additional metadata
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  modifiedAt     DateTime? @map("modified_at") // File system modification time

  // Relations
  repository       Repository          @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  sourceReferences ResourceReference[] @relation("SourceResource")
  targetReferences ResourceReference[] @relation("TargetResource")
  linkedContents   LinkedContent[]

  @@unique([repositoryUuid, path])
  @@index([repositoryUuid])
  @@index([type])
  @@index([status])
  @@index([path])
  @@index([createdAt])
  @@map("repository_resources")
}

model ResourceReference {
  uuid               String    @id @default(cuid())
  sourceResourceUuid String    @map("source_resource_uuid")
  targetResourceUuid String    @map("target_resource_uuid")
  referenceType      String    @map("reference_type") // ReferenceType: 'import', 'include', 'link', 'dependency', 'related', 'other'
  description        String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  lastVerifiedAt     DateTime? @map("last_verified_at")

  // Relations
  sourceResource RepositoryResource @relation("SourceResource", fields: [sourceResourceUuid], references: [uuid], onDelete: Cascade)
  targetResource RepositoryResource @relation("TargetResource", fields: [targetResourceUuid], references: [uuid], onDelete: Cascade)

  @@unique([sourceResourceUuid, targetResourceUuid, referenceType])
  @@index([sourceResourceUuid])
  @@index([targetResourceUuid])
  @@index([referenceType])
  @@map("resource_references")
}

model LinkedContent {
  uuid          String    @id @default(cuid())
  resourceUuid  String    @map("resource_uuid")
  title         String
  url           String
  contentType   String    @map("content_type") // ContentType: 'article', 'video', 'documentation', 'tutorial', 'reference', 'tool', 'library', 'other'
  description   String?   @db.Text
  thumbnail     String?
  author        String?
  publishedAt   DateTime? @map("published_at")
  isAccessible  Boolean   @default(true) @map("is_accessible")
  lastCheckedAt DateTime? @map("last_checked_at")
  cachedAt      DateTime? @map("cached_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  resource RepositoryResource @relation(fields: [resourceUuid], references: [uuid], onDelete: Cascade)

  @@index([resourceUuid])
  @@index([contentType])
  @@index([url])
  @@map("linked_contents")
}

model RepositoryExplorer {
  uuid           String    @id @default(cuid())
  repositoryUuid String    @map("repository_uuid")
  accountUuid    String    @map("account_uuid")
  name           String
  description    String?
  currentPath    String    @map("current_path")
  filters        String?   @db.Text // JSON: filter configuration
  viewConfig     String?   @map("view_config") @db.Text // JSON: view configuration
  pinnedPaths    String?   @map("pinned_paths") @db.Text // JSON array of pinned paths
  recentPaths    String?   @map("recent_paths") @db.Text // JSON array of recent paths
  lastScanAt     DateTime? @map("last_scan_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  repository Repository @relation(fields: [repositoryUuid], references: [uuid], onDelete: Cascade)
  account    Account    @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@unique([repositoryUuid, accountUuid])
  @@index([repositoryUuid])
  @@index([accountUuid])
  @@map("repository_explorers")
}

// ============ Repository Statistics (统计数据) ============

model RepositoryStatistics {
  id          Int    @id @default(autoincrement())
  accountUuid String @unique @map("account_uuid")

  // 仓库统计
  totalRepositories    Int @default(0) @map("total_repositories")
  activeRepositories   Int @default(0) @map("active_repositories")
  archivedRepositories Int @default(0) @map("archived_repositories")

  // 资源统计
  totalResources Int @default(0) @map("total_resources")
  totalFiles     Int @default(0) @map("total_files")
  totalFolders   Int @default(0) @map("total_folders")

  // Git 统计
  gitEnabledRepos Int @default(0) @map("git_enabled_repos")
  totalCommits    Int @default(0) @map("total_commits")

  // 引用统计
  totalReferences     Int @default(0) @map("total_references")
  totalLinkedContents Int @default(0) @map("total_linked_contents")

  // 存储统计
  totalSizeBytes BigInt @default(0) @map("total_size_bytes")

  // 时间戳
  lastUpdatedAt DateTime @default(now()) @map("last_updated_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("repository_statistics")
}

// ============================================================
// Editor Module - DDD Design
// 编辑器模块 - DDD 设计
// ============================================================

/// EditorWorkspace 聚合根
/// 代表一个完整的编辑器工作区，包含多个会话
model EditorWorkspace {
  uuid        String   @id @default(cuid())
  accountUuid String   @map("account_uuid")
  name        String
  description String?
  projectPath String   @unique @map("project_path")
  projectType String   @map("project_type")
  layout      Json
  settings    Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  accessedAt  DateTime @default(now()) @map("accessed_at")

  // Relations
  account  Account                  @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  sessions EditorWorkspaceSession[]

  @@index([accountUuid])
  @@index([isActive])
  @@index([accessedAt])
  @@map("editor_workspaces")
}

/// EditorWorkspaceSession - Session 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSession {
  uuid          String   @id @default(cuid())
  workspaceUuid String   @map("workspace_uuid")
  accountUuid   String   @map("account_uuid")
  name          String
  layout        Json
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account   Account                       @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  workspace EditorWorkspace               @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade)
  groups    EditorWorkspaceSessionGroup[]

  @@index([workspaceUuid])
  @@index([accountUuid])
  @@index([isActive])
  @@map("editor_workspace_sessions")
}

/// EditorWorkspaceSessionGroup - Group 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSessionGroup {
  uuid           String   @id @default(cuid())
  sessionUuid    String   @map("session_uuid")
  workspaceUuid  String   @map("workspace_uuid")
  accountUuid    String   @map("account_uuid")
  groupIndex     Int      @map("group_index")
  name           String?
  splitDirection String   @map("split_direction")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  account Account                          @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  session EditorWorkspaceSession           @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade)
  tabs    EditorWorkspaceSessionGroupTab[]

  @@index([sessionUuid])
  @@index([workspaceUuid])
  @@index([accountUuid])
  @@map("editor_workspace_session_groups")
}

/// EditorWorkspaceSessionGroupTab - Tab 实体
/// 属于 EditorWorkspace 聚合根
model EditorWorkspaceSessionGroupTab {
  uuid          String   @id @default(cuid())
  groupUuid     String   @map("group_uuid")
  sessionUuid   String   @map("session_uuid")
  workspaceUuid String   @map("workspace_uuid")
  accountUuid   String   @map("account_uuid")
  documentUuid  String?  @map("document_uuid")
  tabIndex      Int      @map("tab_index")
  tabType       String   @map("tab_type")
  title         String
  viewState     Json     @map("view_state")
  isPinned      Boolean  @default(false) @map("is_pinned")
  isActive      Boolean  @default(false) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account Account                     @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group   EditorWorkspaceSessionGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@index([groupUuid])
  @@index([sessionUuid])
  @@index([workspaceUuid])
  @@index([accountUuid])
  @@index([documentUuid])
  @@map("editor_workspace_session_group_tabs")
}

// ============================================================
// Setting Module - DDD Design
// 设置模块 - DDD 设计
// ============================================================

/// Setting 聚合根
/// 代表一个完整的设置项，包含验证规则、UI配置等
model Setting {
  uuid             String    @id @default(cuid())
  key              String
  name             String
  description      String?
  valueType        String    @map("value_type") // SettingValueType: 'string', 'number', 'boolean', 'array', 'object', 'password', 'email', 'url', 'color', 'date', 'time', 'datetime'
  value            String    @db.Text // JSON encoded value
  defaultValue     String    @map("default_value") @db.Text // JSON encoded default value
  scope            String // SettingScope: 'SYSTEM', 'USER', 'DEVICE'
  accountUuid      String?   @map("account_uuid")
  deviceId         String?   @map("device_id")
  groupUuid        String?   @map("group_uuid")
  validation       String?   @db.Text // JSON: ValidationRule (optional)
  ui               String?   @db.Text // JSON: UIConfig (optional)
  isEncrypted      Boolean   @default(false) @map("is_encrypted")
  isReadOnly       Boolean   @default(false) @map("is_read_only")
  isSystemSetting  Boolean   @default(false) @map("is_system_setting")
  syncConfig       String?   @map("sync_config") @db.Text // JSON: SyncConfig (optional)
  historyData      String    @default("[]") @map("history_data") @db.Text // JSON array of SettingHistory
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  // Relations
  account Account? @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)
  group   SettingGroup? @relation(fields: [groupUuid], references: [uuid], onDelete: SetNull)

  @@unique([key, scope, accountUuid, deviceId])
  @@index([key])
  @@index([scope])
  @@index([accountUuid])
  @@index([deviceId])
  @@index([groupUuid])
  @@index([isSystemSetting])
  @@index([createdAt])
  @@map("settings")
}

/// SettingGroup - Entity
/// 设置分组，用于组织相关设置
model SettingGroup {
  uuid        String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  parentUuid  String?   @map("parent_uuid")
  order       Int       @default(0)
  icon        String?
  isCollapsed Boolean   @default(false) @map("is_collapsed")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  parent   SettingGroup?  @relation("GroupHierarchy", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children SettingGroup[] @relation("GroupHierarchy")
  settings Setting[]
  items    SettingItem[]

  @@index([parentUuid])
  @@index([order])
  @@map("setting_groups")
}

/// SettingItem - Entity
/// 设置项，关联到具体的设置
model SettingItem {
  uuid        String    @id @default(cuid())
  groupUuid   String    @map("group_uuid")
  settingKey  String    @map("setting_key")
  order       Int       @default(0)
  isVisible   Boolean   @default(true) @map("is_visible")
  customLabel String?   @map("custom_label")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  group SettingGroup @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)

  @@unique([groupUuid, settingKey])
  @@index([groupUuid])
  @@index([settingKey])
  @@index([order])
  @@map("setting_items")
}

/// AppConfig - Separate Aggregate
/// 应用配置（全局单例配置）
model AppConfig {
  uuid        String   @id @default(cuid())
  version     String   @unique
  config      String   @db.Text // JSON: complete app configuration
  description String?
  isCurrent   Boolean  @default(false) @map("is_current")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([version])
  @@index([isCurrent])
  @@map("app_configs")
}

/// UserSetting - Separate Aggregate
/// 用户设置（用户级别的配置聚合）
model UserSetting {
  uuid          String   @id @default(cuid())
  accountUuid   String   @unique @map("account_uuid")
  preferences   String   @default("{}") @db.Text // JSON: user preferences
  theme         String   @default("light")
  language      String   @default("zh-CN")
  timezone      String   @default("Asia/Shanghai")
  notifications String   @default("{}") @db.Text // JSON: notification settings
  privacy       String   @default("{}") @db.Text // JSON: privacy settings
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("user_settings")
}

// ============================================================
// Reminder Module - DDD Design
// 提醒模块 - DDD 设计
// ============================================================

model ReminderStatistics {
  uuid          String   @id @default(cuid())
  accountUuid   String   @unique @map("account_uuid")
  templateStats String   @db.Text @map("template_stats") // JSON: TemplateStatsInfo
  groupStats    String   @db.Text @map("group_stats")    // JSON: GroupStatsInfo
  triggerStats  String   @db.Text @map("trigger_stats")  // JSON: TriggerStatsInfo
  calculatedAt  DateTime @map("calculated_at")

  // Relations
  account Account @relation(fields: [accountUuid], references: [uuid], onDelete: Cascade)

  @@index([accountUuid])
  @@map("reminder_statistics")
}

// ============================================================
// Goal Module - DDD Design
// 目标模块 - DDD 设计
// ============================================================

model Goal {
  uuid             String    @id @default(cuid())
  account_uuid     String
  title            String
  description      String?   @db.Text
  status           String    @default("pending") // e.g., 'pending', 'in_progress', 'completed', 'archived'
  importance       Int       @default(2) // 0-4 scale
  urgency          Int       @default(2) // 0-4 scale
  category         String?
  tags             String?   @db.Text // JSON array of strings
  start_date       DateTime?
  target_date      DateTime?
  completed_at     DateTime?
  archived_at      DateTime?
  folder_uuid      String?
  parent_goal_uuid String?
  sort_order       Int       @default(0)
  reminder_config  String?   @db.Text // JSON for reminder configuration
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  // Relations
  account    Account @relation(fields: [account_uuid], references: [uuid], onDelete: Cascade)
  parentGoal Goal?   @relation("GoalHierarchy", fields: [parent_goal_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  childGoals Goal[]  @relation("GoalHierarchy")

  @@index([account_uuid])
  @@index([status])
  @@index([folder_uuid])
  @@index([parent_goal_uuid])
  @@map("goals")
}

// ============================================================
// Notification Module - DDD Design
// 通知模块 - DDD 设计
// ============================================================

model Notification {
  uuid               String    @id @default(cuid())
  accountUuid        String    @map("account_uuid")
  type               String
  category           String
  status             String
  title              String
  content            String    @db.Text
  importance         String
  urgency            String
  relatedEntityType  String?   @map("related_entity_type")
  relatedEntityUuid  String?   @map("related_entity_uuid")
  metadata           String?   @db.Text // JSON
  actions            String?   @db.Text // JSON
  isRead             Boolean   @default(false) @map("is_read")
  readAt             DateTime? @map("read_at")
  sentAt             DateTime? @map("sent_at")
  expiresAt          DateTime? @map("expires_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  channels NotificationChannel[]
  history  NotificationHistory[]

  @@index([accountUuid])
  @@index([category])
  @@index([status])
  @@map("notifications")
}

model NotificationChannel {
  uuid             String    @id @default(cuid())
  notificationUuid String    @map("notification_uuid")
  channelType      String    @map("channel_type")
  status           String
  recipient        String?
  retryCount       Int       @default(0) @map("retry_count")
  maxRetries       Int       @default(3) @map("max_retries")
  error            String?   @db.Text // JSON
  response         String?   @db.Text // JSON
  createdAt        DateTime  @default(now()) @map("created_at")
  sentAt           DateTime? @map("sent_at")
  deliveredAt      DateTime? @map("delivered_at")
  failedAt         DateTime? @map("failed_at")

  notification Notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])
  @@map("notification_channels")
}

model NotificationHistory {
  uuid             String   @id @default(cuid())
  notificationUuid String   @map("notification_uuid")
  action           String
  details          String?  @db.Text // JSON
  actorUuid        String?  @map("actor_uuid")
  createdAt        DateTime @default(now()) @map("created_at")

  notification Notification @relation(fields: [notificationUuid], references: [uuid], onDelete: Cascade)

  @@index([notificationUuid])
  @@map("notification_history")
}

model NotificationPreference {
  uuid        String   @id @default(cuid())
  accountUuid String   @unique @map("account_uuid")
  enabled     Boolean  @default(true)
  channels    String   @db.Text // JSON
  categories  String   @db.Text // JSON
  doNotDisturb String?  @map("do_not_disturb") @db.Text // JSON
  rateLimit   String?  @map("rate_limit") @db.Text // JSON
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([accountUuid])
  @@map("notification_preferences")
}

model NotificationTemplate {
  uuid            String   @id @default(cuid())
  name            String   @unique
  displayName     String   @map("display_name")
  description     String?
  type            String
  category        String
  titleTemplate   String   @map("title_template")
  contentTemplate String   @map("content_template") @db.Text
  variables       String?  @db.Text // JSON
  defaultActions  String?  @map("default_actions") @db.Text // JSON
  isSystem        Boolean  @default(false) @map("is_system")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@map("notification_templates")
}
