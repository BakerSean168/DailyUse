<template>
    <div class="account-profile-page">
        <!-- 页面标题 -->
        <div class="d-flex align-center justify-between mb-6">
            <h1 class="text-h4">个人资料</h1>
            <v-btn v-if="!isEditing" color="primary" @click="toggleEdit" :disabled="!userStore.isActive">
                <v-icon start>mdi-pencil</v-icon>
                编辑资料
            </v-btn>
        </div>

        <!-- 推荐操作提醒 -->
        <v-alert v-if="userStore.highPriorityActions.length > 0" type="info" variant="tonal" class="mb-6">
            <v-alert-title>建议完成以下操作</v-alert-title>
            <ul class="mt-2">
                <li v-for="action in userStore.highPriorityActions" :key="action.action">
                    {{ action.description }}
                </li>
            </ul>
        </v-alert>

        <!-- 错误提示 -->
        <v-alert v-if="userStore.error" type="error" variant="tonal" class="mb-6" closable
            @click:close="userStore.clearError">
            {{ userStore.error }}
        </v-alert>

        <v-row>
            <!-- 左侧：头像和基本信息 -->
            <v-col cols="12" md="4">
                <v-card>
                    <v-card-text class="text-center">
                        <!-- 头像 -->
                        <DuAvatar :src="userStore.avatarUrl" :username="userStore.currentUser?.username || ''"
                            :status="getAvatarStatus()" size="120" :editable="!isEditing && userStore.isActive"
                            @edit="handleAvatarEdit" class="mb-4" />

                        <!-- 用户名和状态 -->
                        <h3 class="text-h6 mb-2">{{ userStore.displayName }}</h3>
                        <v-chip :color="getStatusColor(userStore.userStatus)" size="small" class="mb-3">
                            {{ getStatusText(userStore.userStatus) }}
                        </v-chip>

                        <!-- 完成度进度 -->
                        <div v-if="!userStore.isProfileComplete" class="mt-4">
                            <div class="text-body-2 mb-2">资料完成度</div>
                            <v-progress-linear :model-value="profileCompletionPercentage" color="primary" height="8"
                                rounded />
                            <div class="text-caption mt-1">
                                {{ profileCompletionPercentage }}%
                            </div>
                        </div>
                    </v-card-text>
                </v-card>

                <!-- 快速操作 -->
                <v-card class="mt-4">
                    <v-card-title>快速操作</v-card-title>
                    <v-card-text>
                        <v-list>
                            <v-list-item v-for="action in userStore.recommendedActions.slice(0, 3)" :key="action.action"
                                :prepend-icon="getActionIcon(action.action)" :title="action.description"
                                :subtitle="getPriorityText(action.priority)" @click="handleQuickAction(action)"
                                class="px-0" />

                            <v-divider class="my-2" />

                            <v-list-item prepend-icon="mdi-lock" title="修改密码" subtitle="保护账户安全"
                                @click="$router.push('/profile/password')" class="px-0" />

                            <v-list-item prepend-icon="mdi-account-off" title="停用账号" subtitle="暂停使用账户"
                                @click="handleDeactivate" class="px-0 text-error" />
                        </v-list>
                    </v-card-text>
                </v-card>
            </v-col>

            <!-- 右侧：详细信息表单 -->
            <v-col cols="12" md="8">
                <v-card>
                    <v-card-title class="d-flex align-center justify-between">
                        <span>详细信息</span>
                        <div v-if="isEditing">
                            <v-btn variant="outlined" @click="cancelEdit" class="mr-2">
                                取消
                            </v-btn>
                            <v-btn color="primary" @click="saveProfile" :loading="userStore.loading">
                                保存
                            </v-btn>
                        </div>
                    </v-card-title>

                    <v-card-text>
                        <DuProfileForm v-if="userStore.currentUser"
                            :user-data="mapUserToProfileForm(userStore.currentUser)" :loading="userStore.loading"
                            :error="formError" :success="formSuccess" @submit="handleProfileUpdate"
                            @avatar-upload="handleAvatarUpload" @clear-error="clearFormError"
                            @clear-success="clearFormSuccess" />
                    </v-card-text>
                </v-card>
            </v-col>
        </v-row>

        <!-- 头像上传对话框 -->
        <DuDialog v-model="showAvatarDialog" title="更换头像" title-icon="mdi-account-circle" max-width="400px">
            <v-file-input v-model="avatarFile" label="选择头像文件" accept="image/*" prepend-icon="mdi-camera" clearable
                show-size :rules="avatarRules" />

            <template #actions>
                <v-btn @click="showAvatarDialog = false">取消</v-btn>
                <v-btn color="primary" :disabled="!avatarFile || avatarFile.length === 0" :loading="userStore.loading"
                    @click="uploadAvatar">
                    上传
                </v-btn>
            </template>
        </DuDialog>

        <!-- 停用确认对话框 -->
        <DuConfirmDialog v-model="showDeactivateDialog" title="确认停用账号" message="停用后您将无法登录和使用相关功能，确定要停用吗？"
            confirm-text="确认停用" confirm-color="error" @confirm="confirmDeactivate" />
    </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue';
import { useRouter } from 'vue-router';
import { useUserStore } from '../stores/userStore';
import {
    DuAvatar,
    DuProfileForm,
    DuDialog,
    DuConfirmDialog,
    useSnackbar
} from '@dailyuse/ui';
import type { UpdateUserProfileDto } from '../../application/dtos/UserDtos';

const router = useRouter();
const userStore = useUserStore();
const { showSuccess, showError } = useSnackbar();

// 组件状态
const isEditing = ref(false);
const formError = ref<string | null>(null);
const formSuccess = ref<string | null>(null);
const showAvatarDialog = ref(false);
const showDeactivateDialog = ref(false);
const avatarFile = ref<File[]>([]);

// 头像验证规则
const avatarRules = [
    (files: File[]) => {
        if (!files || files.length === 0) return true;
        const file = files[0];
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        return allowedTypes.includes(file.type) || '头像必须是JPG、PNG或WebP格式';
    },
    (files: File[]) => {
        if (!files || files.length === 0) return true;
        const file = files[0];
        const maxSize = 5 * 1024 * 1024; // 5MB
        return file.size <= maxSize || '头像文件大小不能超过5MB';
    }
];

// 计算属性
const profileCompletionPercentage = computed(() => {
    if (!userStore.currentUser) return 0;

    const fields = [
        'email', 'firstName', 'lastName', 'displayName',
        'phoneNumber', 'bio', 'avatar'
    ];

    const completedFields = fields.filter(field => {
        const value = userStore.currentUser![field as keyof typeof userStore.currentUser];
        return value && value.toString().trim() !== '';
    });

    return Math.round((completedFields.length / fields.length) * 100);
});

// 生命周期
onMounted(() => {
    if (!userStore.currentUser) {
        userStore.fetchCurrentUser();
    }
});

// 方法
const toggleEdit = () => {
    isEditing.value = !isEditing.value;
    if (isEditing.value) {
        clearFormMessages();
    }
};

const cancelEdit = () => {
    isEditing.value = false;
    clearFormMessages();
};

const saveProfile = () => {
    // 表单会通过 @submit 事件触发保存
};

const handleProfileUpdate = async (profileData: UpdateUserProfileDto) => {
    try {
        const result = await userStore.updateProfile(profileData);

        if (result.success) {
            formSuccess.value = result.message;
            showSuccess(result.message);
            isEditing.value = false;
        } else {
            formError.value = result.message;
            showError(result.message);
        }
    } catch (error) {
        const message = error instanceof Error ? error.message : '更新失败';
        formError.value = message;
        showError(message);
    }
};

const handleAvatarEdit = () => {
    showAvatarDialog.value = true;
    avatarFile.value = [];
};

const uploadAvatar = async () => {
    if (!avatarFile.value || avatarFile.value.length === 0) return;

    try {
        const result = await userStore.uploadAvatar(avatarFile.value[0]);

        if (result.success) {
            showSuccess(result.message);
            showAvatarDialog.value = false;
            avatarFile.value = [];
        } else {
            showError(result.message);
        }
    } catch (error) {
        showError(error instanceof Error ? error.message : '上传失败');
    }
};

const handleAvatarUpload = async (file: File) => {
    try {
        const result = await userStore.uploadAvatar(file);

        if (result.success) {
            formSuccess.value = result.message;
            showSuccess(result.message);
        } else {
            formError.value = result.message;
            showError(result.message);
        }
    } catch (error) {
        const message = error instanceof Error ? error.message : '上传失败';
        formError.value = message;
        showError(message);
    }
};

const handleDeactivate = () => {
    showDeactivateDialog.value = true;
};

const confirmDeactivate = async () => {
    try {
        const result = await userStore.deactivateAccount();

        if (result.success) {
            showSuccess(result.message);
            router.push('/login');
        } else {
            showError(result.message);
        }
    } catch (error) {
        showError(error instanceof Error ? error.message : '停用失败');
    } finally {
        showDeactivateDialog.value = false;
    }
};

const handleQuickAction = (action: any) => {
    if (action.actionUrl) {
        router.push(action.actionUrl);
    }
};

// 状态相关方法
const getAvatarStatus = (): 'online' | 'busy' | 'away' | 'offline' => {
    switch (userStore.userStatus) {
        case 'active': return 'online';
        case 'busy': return 'busy';
        case 'away': return 'away';
        default: return 'offline';
    }
};

const getStatusColor = (status: string) => {
    const colors: Record<string, string> = {
        active: 'success',
        inactive: 'warning',
        suspended: 'error',
        deactivated: 'grey'
    };
    return colors[status] || 'grey';
};

const getStatusText = (status: string) => {
    const texts: Record<string, string> = {
        active: '活跃',
        inactive: '未激活',
        suspended: '已暂停',
        deactivated: '已停用'
    };
    return texts[status] || '未知';
};

const getActionIcon = (action: string) => {
    const icons: Record<string, string> = {
        upload_avatar: 'mdi-account-circle',
        complete_profile: 'mdi-account-edit',
        change_password: 'mdi-lock'
    };
    return icons[action] || 'mdi-arrow-right';
};

const getPriorityText = (priority: string) => {
    const texts: Record<string, string> = {
        high: '重要',
        medium: '建议',
        low: '可选'
    };
    return texts[priority] || '';
};

const mapUserToProfileForm = (user: any) => {
    return {
        username: user.username,
        displayName: user.displayName || '',
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        phoneNumber: user.phoneNumber || '',
        bio: user.bio || '',
        avatar: user.avatar || '',
        sex: user.sex || '',
        birthday: user.birthday || '',
        status: user.status
    };
};

const clearFormMessages = () => {
    formError.value = null;
    formSuccess.value = null;
};

const clearFormError = () => {
    formError.value = null;
};

const clearFormSuccess = () => {
    formSuccess.value = null;
};
</script>

<style scoped>
.account-profile-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 24px;
}

.text-error {
    color: rgb(var(--v-theme-error)) !important;
}
</style>
