/**
 * Performance Benchmark Report Generator (STORY-014)
 * 性能基准测试报告生成器
 */

import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';

/**
 * 性能基准目标
 */
const PERFORMANCE_TARGETS = {
  'DAG Rendering': { target: 500, unit: 'ms', description: 'Build DAG nodes (100 goals)' },
  'Goal CRUD': { target: 100, unit: 'ms', description: 'Average CRUD operation time' },
  'Weight Calculation': { target: 50, unit: 'ms', description: 'Calculate weighted progress' },
  'Rule Evaluation': { target: 10, unit: 'ms', description: 'Single rule evaluation' },
  'JSON Serialization': {
    target: 20,
    unit: 'ms',
    description: 'Serialize large dataset (100 goals)',
  },
  'Array Operations': { target: 10, unit: 'ms', description: 'Filter/Map/Sort operations' },
};

interface BenchmarkResult {
  name: string;
  time: number;
  iterations: number;
  hz: number;
}

interface PerformanceReport {
  timestamp: string;
  results: BenchmarkResult[];
  summary: {
    total: number;
    passed: number;
    failed: number;
    passRate: number;
  };
  baselines: Record<string, number>;
}

/**
 * 生成 Markdown 报告
 */
export function generateMarkdownReport(report: PerformanceReport): string {
  const { timestamp, results, summary, baselines } = report;

  let markdown = `# Performance Benchmark Report\n\n`;
  markdown += `**Generated**: ${timestamp}\n\n`;
  markdown += `## 📊 Summary\n\n`;
  markdown += `- **Total Tests**: ${summary.total}\n`;
  markdown += `- **Passed**: ${summary.passed} ✅\n`;
  markdown += `- **Failed**: ${summary.failed} ❌\n`;
  markdown += `- **Pass Rate**: ${(summary.passRate * 100).toFixed(1)}%\n\n`;

  markdown += `## 🎯 Performance Targets\n\n`;
  markdown += `| Metric | Target | Status |\n`;
  markdown += `|--------|--------|--------|\n`;

  Object.entries(PERFORMANCE_TARGETS).forEach(([name, config]) => {
    const result = results.find((r) => r.name.includes(config.description));
    const actual = result ? result.time : 0;
    const status = actual <= config.target ? '✅ Pass' : '❌ Fail';
    markdown += `| ${name} | < ${config.target}${config.unit} | ${status} (${actual.toFixed(2)}${config.unit}) |\n`;
  });

  markdown += `\n## 📈 Detailed Results\n\n`;
  markdown += `| Benchmark | Time (avg) | Iterations | Ops/sec |\n`;
  markdown += `|-----------|-----------|------------|----------|\n`;

  results.forEach((result) => {
    markdown += `| ${result.name} | ${result.time.toFixed(2)}ms | ${result.iterations} | ${result.hz.toFixed(0)} |\n`;
  });

  markdown += `\n## 📉 Baseline Comparison\n\n`;
  if (Object.keys(baselines).length > 0) {
    markdown += `| Benchmark | Current | Baseline | Change |\n`;
    markdown += `|-----------|---------|----------|--------|\n`;

    results.forEach((result) => {
      const baseline = baselines[result.name];
      if (baseline) {
        const change = ((result.time - baseline) / baseline) * 100;
        const changeText = change > 0 ? `+${change.toFixed(1)}%` : `${change.toFixed(1)}%`;
        const icon = change > 10 ? '⚠️' : change < -10 ? '🚀' : '✅';
        markdown += `| ${result.name} | ${result.time.toFixed(2)}ms | ${baseline.toFixed(2)}ms | ${changeText} ${icon} |\n`;
      }
    });
  } else {
    markdown += `*No baseline data available. This will serve as the baseline for future comparisons.*\n`;
  }

  markdown += `\n## 💡 Recommendations\n\n`;
  const failedTests = results.filter((r) => {
    const targetEntry = Object.values(PERFORMANCE_TARGETS).find((t) =>
      r.name.includes(t.description),
    );
    return targetEntry && r.time > targetEntry.target;
  });

  if (failedTests.length > 0) {
    markdown += `### ⚠️ Performance Issues Detected\n\n`;
    failedTests.forEach((test) => {
      markdown += `- **${test.name}**: ${test.time.toFixed(2)}ms (needs optimization)\n`;
    });
  } else {
    markdown += `✅ All benchmarks are within performance targets!\n`;
  }

  markdown += `\n---\n\n`;
  markdown += `*Generated by DailyUse Performance Benchmark Suite*\n`;

  return markdown;
}

/**
 * 生成 HTML 报告
 */
export function generateHTMLReport(report: PerformanceReport): string {
  const { timestamp, results, summary } = report;

  return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Performance Benchmark Report - ${timestamp}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      background: #f5f5f5;
      padding: 2rem;
      line-height: 1.6;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    h1 { color: #333; margin-bottom: 0.5rem; }
    .meta { color: #666; margin-bottom: 2rem; }
    .summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }
    .summary-card {
      padding: 1rem;
      border-radius: 4px;
      border: 1px solid #ddd;
    }
    .summary-card h3 { font-size: 0.9rem; color: #666; margin-bottom: 0.5rem; }
    .summary-card .value { font-size: 2rem; font-weight: bold; }
    .pass { color: #4caf50; }
    .fail { color: #f44336; }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 2rem;
    }
    th, td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    th { background: #f5f5f5; font-weight: 600; }
    tr:hover { background: #fafafa; }
    .badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.875rem;
      font-weight: 500;
    }
    .badge-pass { background: #e8f5e9; color: #4caf50; }
    .badge-fail { background: #ffebee; color: #f44336; }
    .chart {
      width: 100%;
      height: 400px;
      margin-bottom: 2rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>📊 Performance Benchmark Report</h1>
    <p class="meta">Generated: ${timestamp}</p>

    <div class="summary">
      <div class="summary-card">
        <h3>Total Tests</h3>
        <div class="value">${summary.total}</div>
      </div>
      <div class="summary-card">
        <h3>Passed</h3>
        <div class="value pass">${summary.passed}</div>
      </div>
      <div class="summary-card">
        <h3>Failed</h3>
        <div class="value fail">${summary.failed}</div>
      </div>
      <div class="summary-card">
        <h3>Pass Rate</h3>
        <div class="value">${(summary.passRate * 100).toFixed(1)}%</div>
      </div>
    </div>

    <h2>🎯 Performance Targets</h2>
    <table>
      <thead>
        <tr>
          <th>Metric</th>
          <th>Target</th>
          <th>Actual</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        ${Object.entries(PERFORMANCE_TARGETS)
          .map(([name, config]) => {
            const result = results.find((r) => r.name.includes(config.description));
            const actual = result ? result.time : 0;
            const passed = actual <= config.target;
            return `
            <tr>
              <td><strong>${name}</strong><br><small>${config.description}</small></td>
              <td>&lt; ${config.target}${config.unit}</td>
              <td>${actual.toFixed(2)}${config.unit}</td>
              <td><span class="badge ${passed ? 'badge-pass' : 'badge-fail'}">${passed ? '✅ Pass' : '❌ Fail'}</span></td>
            </tr>
          `;
          })
          .join('')}
      </tbody>
    </table>

    <h2>📈 Detailed Results</h2>
    <table>
      <thead>
        <tr>
          <th>Benchmark</th>
          <th>Avg Time</th>
          <th>Iterations</th>
          <th>Ops/sec</th>
        </tr>
      </thead>
      <tbody>
        ${results
          .map(
            (result) => `
          <tr>
            <td>${result.name}</td>
            <td>${result.time.toFixed(2)}ms</td>
            <td>${result.iterations}</td>
            <td>${result.hz.toFixed(0)}</td>
          </tr>
        `,
          )
          .join('')}
      </tbody>
    </table>
  </div>
</body>
</html>
  `;
}

/**
 * 保存报告
 */
export function saveReports(report: PerformanceReport, outputDir: string) {
  if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true });
  }

  const markdownPath = join(outputDir, 'BENCHMARK-REPORT.md');
  const htmlPath = join(outputDir, 'benchmark-report.html');
  const jsonPath = join(outputDir, 'benchmark-results.json');

  writeFileSync(markdownPath, generateMarkdownReport(report));
  writeFileSync(htmlPath, generateHTMLReport(report));
  writeFileSync(jsonPath, JSON.stringify(report, null, 2));

  console.log(`✅ Reports generated:`);
  console.log(`   - Markdown: ${markdownPath}`);
  console.log(`   - HTML: ${htmlPath}`);
  console.log(`   - JSON: ${jsonPath}`);
}

/**
 * 示例：生成报告
 */
if (import.meta.url === `file://${process.argv[1]}`) {
  const sampleReport: PerformanceReport = {
    timestamp: new Date().toISOString(),
    results: [
      { name: 'Build DAG nodes (100 goals)', time: 45.2, iterations: 100, hz: 22 },
      { name: 'Create Goal', time: 12.5, iterations: 100, hz: 80 },
      { name: 'Single rule evaluation', time: 8.3, iterations: 1000, hz: 120 },
      { name: 'Calculate weighted progress', time: 5.1, iterations: 1000, hz: 196 },
    ],
    summary: {
      total: 4,
      passed: 4,
      failed: 0,
      passRate: 1.0,
    },
    baselines: {},
  };

  saveReports(sampleReport, './benchmarks/results');
}
