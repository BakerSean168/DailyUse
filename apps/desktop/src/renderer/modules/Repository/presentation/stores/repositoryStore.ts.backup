import { defineStore } from "pinia";
import { Repository, Resource, RepositoryContracts } from "../../domain";

/**
 * Repository Store - 基于领域实体的存储
 */
export const useRepositoryStore = defineStore("repository", {
  state: () => ({
    repositories: [] as Repository[],
    resources: [] as Resource[],
    isLoading: false,
    error: null as string | null,
    selectedRepository: null as string | null,
  }),

  getters: {
    getAllRepositories(state): Repository[] {
      return state.repositories;
    },

    getRepositoryByUuid:
      (state) =>
      (uuid: string): Repository | null => {
        return state.repositories.find((r) => r.uuid === uuid) || null;
      },

    getRepositoryByName:
      (state) =>
      (name: string): Repository | null => {
        return state.repositories.find((r) => r.name === name) || null;
      },

    getRepositoriesByGoalUuid:
      (state) =>
      (goalUuid: string): Repository[] => {
        return state.repositories.filter((r) => {
          const relatedGoals = r.relatedGoals;
          return relatedGoals && relatedGoals.length > 0 && relatedGoals.includes(goalUuid);
        });
      },

    getActiveRepositories(state): Repository[] {
      return state.repositories.filter((r) => r.isActive());
    },

    getResourcesByRepositoryUuid:
      (state) =>
      (repositoryUuid: string): Resource[] => {
        return state.resources.filter((r) => r.repositoryUuid === repositoryUuid);
      },
  },

  actions: {
    setLoading(loading: boolean) {
      this.isLoading = loading;
    },

    setError(error: string | null) {
      this.error = error;
    },

    setRepositories(repositories: Repository[]) {
      this.repositories = repositories;
    },

    addRepository(repository: Repository) {
      const existing = this.repositories.find((r) => r.uuid === repository.uuid);
      if (existing) {
        const index = this.repositories.indexOf(existing);
        this.repositories[index] = repository;
      } else {
        if (this.repositories.some((repo) => repo.name === repository.name)) {
          throw new Error("Repository name already exists");
        }
        this.repositories.push(repository);
      }
    },

    updateRepository(uuid: string, repository: Repository) {
      const index = this.repositories.findIndex((r) => r.uuid === uuid);
      if (index !== -1) {
        this.repositories[index] = repository;
      }
    },

    removeRepositoryById(repositoryId: string): boolean {
      const index = this.repositories.findIndex((repo) => repo.uuid === repositoryId);
      if (index > -1) {
        this.repositories.splice(index, 1);
        // 删除关联的资源
        this.resources = this.resources.filter(r => r.repositoryUuid !== repositoryId);
        // 清理选中状态
        if (this.selectedRepository === repositoryId) {
          this.selectedRepository = null;
        }
        return true;
      }
      return false;
    },

    async getRepositoryById(repositoryId: string): Promise<Repository | null> {
      const repository = this.repositories.find((repo) => repo.uuid === repositoryId);
      if (repository && repository instanceof Repository) {
        return repository;
      } else if (repository) {
        return Repository.fromDTO(repository as any);
      }
      return null;
    },

    setResources(resources: Resource[]) {
      this.resources = resources;
    },

    addResource(resource: Resource) {
      const existing = this.resources.find((r) => r.uuid === resource.uuid);
      if (existing) {
        const index = this.resources.indexOf(existing);
        this.resources[index] = resource;
      } else {
        this.resources.push(resource);
      }
    },

    removeResource(uuid: string): boolean {
      const index = this.resources.findIndex((r) => r.uuid === uuid);
      if (index !== -1) {
        this.resources.splice(index, 1);
        return true;
      }
      return false;
    },

    setSelectedRepository(uuid: string | null) {
      this.selectedRepository = uuid;
    },

    currentRepositoryPath(): string {
      const currentRepo = this.repositories.find(
        (repository) => repository.name === window.location.hash.split("/").pop()
      );
      return currentRepo?.path || "";
    },
  },
});